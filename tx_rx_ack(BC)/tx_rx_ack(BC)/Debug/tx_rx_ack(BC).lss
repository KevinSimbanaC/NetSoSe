
tx_rx_ack(BC).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00002932  000029c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000369  00800214  00800214  000029da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a07f  00000000  00000000  00003144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f38  00000000  00000000  0000d1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c9e5  00000000  00000000  000110fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001788  00000000  00000000  0001dae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f2b9  00000000  00000000  0001f268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006262  00000000  00000000  0003e521  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  00044783  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000afaf  00000000  00000000  00044deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_17>
      48:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_18>
      4c:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__vector_19>
      50:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__vector_32>
      84:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_33>
      88:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_34>
      8c:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_35>
      90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__vector_42>
      ac:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__vector_43>
      b0:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__vector_44>
      b4:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__vector_45>
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_47>
      c0:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__vector_48>
      c4:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_49>
      c8:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__vector_50>
      cc:	73 c0       	rjmp	.+230    	; 0x1b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c0       	rjmp	.+226    	; 0x1b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c0       	rjmp	.+218    	; 0x1b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c0       	rjmp	.+214    	; 0x1b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_57>
      e8:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_58>
      ec:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_59>
      f0:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_60>
      f4:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_61>
      f8:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_62>
      fc:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_63>
     100:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_64>
     104:	57 c0       	rjmp	.+174    	; 0x1b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c0       	rjmp	.+170    	; 0x1b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c0       	rjmp	.+166    	; 0x1b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c0       	rjmp	.+162    	; 0x1b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c0       	rjmp	.+158    	; 0x1b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__vector_70>
     11c:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_71>
     120:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__vector_72>
     124:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_73>
     128:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_74>
     12c:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_75>
     130:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_76>
     134:	e8 06       	cpc	r14, r24
     136:	0f 07       	cpc	r16, r31
     138:	03 07       	cpc	r16, r19
     13a:	1c 07       	cpc	r17, r28
     13c:	03 07       	cpc	r16, r19
     13e:	db 06       	cpc	r13, r27
     140:	f5 06       	cpc	r15, r21
     142:	03 07       	cpc	r16, r19
     144:	03 07       	cpc	r16, r19
     146:	03 07       	cpc	r16, r19
     148:	03 07       	cpc	r16, r19
     14a:	03 07       	cpc	r16, r19
     14c:	af 06       	cpc	r10, r31
     14e:	03 07       	cpc	r16, r19
     150:	03 07       	cpc	r16, r19
     152:	03 07       	cpc	r16, r19
     154:	03 07       	cpc	r16, r19
     156:	03 07       	cpc	r16, r19
     158:	03 07       	cpc	r16, r19
     15a:	3b 07       	cpc	r19, r27
     15c:	03 07       	cpc	r16, r19
     15e:	03 07       	cpc	r16, r19
     160:	74 07       	cpc	r23, r20

00000162 <__trampolines_end>:
     162:	04 03       	mulsu	r16, r20
     164:	03 02       	muls	r16, r19
     166:	02 01       	movw	r0, r4
     168:	00 ff       	sbrs	r16, 0
     16a:	fe fd       	.word	0xfdfe	; ????
     16c:	fc fb       	.word	0xfbfc	; ????
     16e:	f9 f7       	brne	.-2      	; 0x16e <__trampolines_end+0xc>
     170:	f4 ef       	ldi	r31, 0xF4	; 244

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d1 e8       	ldi	r29, 0x81	; 129
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
     182:	12 e0       	ldi	r17, 0x02	; 2
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	e2 e3       	ldi	r30, 0x32	; 50
     18a:	f9 e2       	ldi	r31, 0x29	; 41
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a4 31       	cpi	r26, 0x14	; 20
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	25 e0       	ldi	r18, 0x05	; 5
     19e:	a4 e1       	ldi	r26, 0x14	; 20
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	ad 37       	cpi	r26, 0x7D	; 125
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <main>
     1b0:	0c 94 97 14 	jmp	0x292e	; 0x292e <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <common_tc_read_count>:
     1b6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <tmr_read_count>
     1ba:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <timer_mul_var>
     1be:	22 23       	and	r18, r18
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <common_tc_read_count+0x42>
     1c2:	40 91 7c 05 	lds	r20, 0x057C	; 0x80057c <timer_multiplier>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <timer_mul_var>
     1cc:	64 2f       	mov	r22, r20
     1ce:	73 2f       	mov	r23, r19
     1d0:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
     1d4:	fb 01       	movw	r30, r22
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	64 2f       	mov	r22, r20
     1dc:	73 2f       	mov	r23, r19
     1de:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	62 9f       	mul	r22, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	63 9f       	mul	r22, r19
     1ea:	90 0d       	add	r25, r0
     1ec:	72 9f       	mul	r23, r18
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	8e 0f       	add	r24, r30
     1f4:	9f 1f       	adc	r25, r31
     1f6:	08 95       	ret
     1f8:	60 91 7c 05 	lds	r22, 0x057C	; 0x80057c <timer_multiplier>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	08 95       	ret

00000206 <common_tc_compare_stop>:
     206:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <tmr_disable_cc_interrupt>
     20a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <save_cpu_interrupt>
     20e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
     212:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
     216:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end+0x2>
     21a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x3>
     21e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <compare_value+0x1>
     222:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <compare_value>
     226:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <restore_cpu_interrupt>

0000022a <common_tc_overflow_stop>:
     22a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <tmr_disable_ovf_interrupt>
     22e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <timer_mul_var>
     232:	08 95       	ret

00000234 <common_tc_stop>:
     234:	e8 df       	rcall	.-48     	; 0x206 <common_tc_compare_stop>
     236:	f9 df       	rcall	.-14     	; 0x22a <common_tc_overflow_stop>
     238:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <tmr_stop>

0000023c <common_tc_delay>:
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <tmr_read_count>
     24a:	8c 01       	movw	r16, r24
     24c:	be 01       	movw	r22, r28
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <timer_multiplier>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsi3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	a8 01       	movw	r20, r16
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	6a 1f       	adc	r22, r26
     270:	7b 1f       	adc	r23, r27
     272:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <__data_end>
     276:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <__data_end+0x1>
     27a:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <__data_end+0x2>
     27e:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <__data_end+0x3>
     282:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__data_end>
     286:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__data_end+0x1>
     28a:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__data_end+0x2>
     28e:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__data_end+0x3>
     292:	ab 01       	movw	r20, r22
     294:	66 27       	eor	r22, r22
     296:	77 27       	eor	r23, r23
     298:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <__data_end>
     29c:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <__data_end+0x1>
     2a0:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <__data_end+0x2>
     2a4:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <__data_end+0x3>
     2a8:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__data_end>
     2ac:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__data_end+0x1>
     2b0:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__data_end+0x2>
     2b4:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__data_end+0x3>
     2b8:	41 15       	cp	r20, r1
     2ba:	51 05       	cpc	r21, r1
     2bc:	61 05       	cpc	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	91 f0       	breq	.+36     	; 0x2e6 <common_tc_delay+0xaa>
     2c2:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__data_end>
     2c6:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__data_end+0x1>
     2ca:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__data_end+0x2>
     2ce:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__data_end+0x3>
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	08 0f       	add	r16, r24
     2d6:	19 1f       	adc	r17, r25
     2d8:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <compare_value+0x1>
     2dc:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <compare_value>
     2e0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <tmr_disable_cc_interrupt>
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <common_tc_delay+0xba>
     2e6:	08 0f       	add	r16, r24
     2e8:	19 1f       	adc	r17, r25
     2ea:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <compare_value+0x1>
     2ee:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <compare_value>
     2f2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <tmr_enable_cc_interrupt>
     2f6:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <compare_value>
     2fa:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <compare_value+0x1>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	91 05       	cpc	r25, r1
     302:	30 f4       	brcc	.+12     	; 0x310 <common_tc_delay+0xd4>
     304:	8c 59       	subi	r24, 0x9C	; 156
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <compare_value+0x1>
     30c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <compare_value>
     310:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <compare_value>
     314:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <compare_value+0x1>
     318:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <tmr_write_cmpreg>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <common_tc_init>:
     326:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <timer_mul_var>
     32a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <tmr_init>
     32e:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <timer_multiplier>
     332:	08 95       	ret

00000334 <tmr_ovf_callback>:
     334:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     338:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     33c:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__data_end+0x2>
     340:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__data_end+0x3>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	c9 f0       	breq	.+50     	; 0x37e <tmr_ovf_callback+0x4a>
     34c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     350:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     354:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__data_end+0x2>
     358:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__data_end+0x3>
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	a1 09       	sbc	r26, r1
     360:	b1 09       	sbc	r27, r1
     362:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
     366:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
     36a:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <__data_end+0x2>
     36e:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <__data_end+0x3>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	11 f4       	brne	.+4      	; 0x37e <tmr_ovf_callback+0x4a>
     37a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <tmr_enable_cc_interrupt>
     37e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <timer_mul_var>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <timer_mul_var>
     388:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <timer_multiplier>
     38c:	89 17       	cp	r24, r25
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <tmr_ovf_callback+0x6e>
     390:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <timer_mul_var>
     394:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <common_tc_ovf_callback>
     398:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <common_tc_ovf_callback+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	09 f0       	breq	.+2      	; 0x3a2 <tmr_ovf_callback+0x6e>
     3a0:	19 95       	eicall
     3a2:	08 95       	ret

000003a4 <tmr_cca_callback>:
     3a4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <tmr_disable_cc_interrupt>
     3a8:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <common_tc_cca_callback>
     3ac:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <common_tc_cca_callback+0x1>
     3b0:	30 97       	sbiw	r30, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <tmr_cca_callback+0x12>
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <set_common_tc_overflow_callback>:
     3b8:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <common_tc_ovf_callback+0x1>
     3bc:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <common_tc_ovf_callback>
     3c0:	08 95       	ret

000003c2 <set_common_tc_expiry_callback>:
     3c2:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <common_tc_cca_callback+0x1>
     3c6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <common_tc_cca_callback>
     3ca:	08 95       	ret

000003cc <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     3ce:	61 50       	subi	r22, 0x01	; 1
     3d0:	71 09       	sbc	r23, r1
     3d2:	81 09       	sbc	r24, r1
     3d4:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     3d6:	61 15       	cp	r22, r1
     3d8:	71 05       	cpc	r23, r1
     3da:	81 05       	cpc	r24, r1
     3dc:	91 05       	cpc	r25, r1
     3de:	b9 f7       	brne	.-18     	; 0x3ce <__portable_avr_delay_cycles+0x2>
     3e0:	08 95       	ret

000003e2 <usr_wireless_app_task>:
	// This function will be called repeatedly from main.c. (Refer to function app_task(), WirelessTask() in main.c)
	// The following code demonstrates transmission of a sample packet frame every 1 second.
	int cont =0;
	#ifdef TRANSMITTER_ENABLED		
		// This code block will be called only if the transmission is enabled.
		if (coord)
     3e2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <coord>
     3e6:	88 23       	and	r24, r24
     3e8:	c1 f0       	breq	.+48     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     3ea:	5e 98       	cbi	0x0b, 6	; 11
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
     3ec:	84 e0       	ldi	r24, 0x04	; 4
     3ee:	8c b9       	out	0x0c, r24	; 12
			prender(LEDR);
			cambiar(LEDA);
			if( cont<5)
			{
				//prender(LED0);
				transmit_sample_frame((uint8_t*)mensajetx,strlen(mensajetx));
     3f0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <mensajetx>
     3f4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <mensajetx+0x1>
     3f8:	fc 01       	movw	r30, r24
     3fa:	01 90       	ld	r0, Z+
     3fc:	00 20       	and	r0, r0
     3fe:	e9 f7       	brne	.-6      	; 0x3fa <usr_wireless_app_task+0x18>
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	bf 01       	movw	r22, r30
     404:	68 1b       	sub	r22, r24
     406:	79 0b       	sbc	r23, r25
     408:	e8 d0       	rcall	.+464    	; 0x5da <transmit_sample_frame>
				delay_ms(5000);
     40a:	6b ea       	ldi	r22, 0xAB	; 171
     40c:	79 eb       	ldi	r23, 0xB9	; 185
     40e:	85 e6       	ldi	r24, 0x65	; 101
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	dc df       	rcall	.-72     	; 0x3cc <__portable_avr_delay_cycles>
				cont ++;
			}
			//apagar(LED1);
			fintx = true;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <fintx>
     41a:	08 95       	ret

0000041c <usr_frame_received_cb>:
/**
* \brief This function needs to be edited by the user for adding  tasks when a frame is received
* \param frame pointer to the received frame
*/
void usr_frame_received_cb(frame_info_t *frame)
{ 
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
		//TODO (Project Wizard) - Add application task when the frame is received

		/* Toggle an LED in when frame is received */
		/* led_toggle(); */
		if (nodo)
     420:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <nodo>
     424:	22 23       	and	r18, r18
     426:	49 f1       	breq	.+82     	; 0x47a <usr_frame_received_cb+0x5e>
     428:	ec 01       	movw	r28, r24
		{
			
			delay_ms(3000);
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	79 e0       	ldi	r23, 0x09	; 9
     42e:	8d e3       	ldi	r24, 0x3D	; 61
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	cc df       	rcall	.-104    	; 0x3cc <__portable_avr_delay_cycles>
			memset(&trama_rx,0,sizeof(trama_rx));
     434:	85 e8       	ldi	r24, 0x85	; 133
     436:	e5 e9       	ldi	r30, 0x95	; 149
     438:	f4 e0       	ldi	r31, 0x04	; 4
     43a:	df 01       	movw	r26, r30
     43c:	1d 92       	st	X+, r1
     43e:	8a 95       	dec	r24
     440:	e9 f7       	brne	.-6      	; 0x43c <usr_frame_received_cb+0x20>
			memcpy(&trama_rx,frame->mpdu,sizeof(trama_rx));
     442:	ef 81       	ldd	r30, Y+7	; 0x07
     444:	f8 85       	ldd	r31, Y+8	; 0x08
     446:	85 e8       	ldi	r24, 0x85	; 133
     448:	a5 e9       	ldi	r26, 0x95	; 149
     44a:	b4 e0       	ldi	r27, 0x04	; 4
     44c:	01 90       	ld	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	8a 95       	dec	r24
     452:	e1 f7       	brne	.-8      	; 0x44c <usr_frame_received_cb+0x30>
			bmm_buffer_free(frame->buffer_header);
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	59 d3       	rcall	.+1714   	; 0xb0c <bmm_buffer_free>
			mensajerx = trama_rx.carga;
     45a:	8f e9       	ldi	r24, 0x9F	; 159
     45c:	94 e0       	ldi	r25, 0x04	; 4
     45e:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <mensajerx+0x1>
     462:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <mensajerx>
			if (cont1<5)
     466:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <cont1>
     46a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <cont1+0x1>
     46e:	05 97       	sbiw	r24, 0x05	; 5
     470:	24 f4       	brge	.+8      	; 0x47a <usr_frame_received_cb+0x5e>
			{
				transmit_sample_frame((uint8_t*)mensajerx,12);
     472:	6c e0       	ldi	r22, 0x0C	; 12
     474:	8f e9       	ldi	r24, 0x9F	; 159
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	b0 d0       	rcall	.+352    	; 0x5da <transmit_sample_frame>
				//prender(LED1);
			}
			
		}
		//apagar(LED1);
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <usr_frame_transmitted_cb>:
	//TODO (Project Wizard) - Add application tasks when the frame is transmitted

	/* Toggle an LED in user-interface */
	/* led_toggle(); */
	//cambiar(LED0);
	while (fintx == false)
     480:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <fintx>
     484:	81 11       	cpse	r24, r1
     486:	06 c0       	rjmp	.+12     	; 0x494 <usr_frame_transmitted_cb+0x14>
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	92 bb       	out	0x12, r25	; 18
     48c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <fintx>
     490:	88 23       	and	r24, r24
     492:	d9 f3       	breq	.-10     	; 0x48a <usr_frame_transmitted_cb+0xa>
     494:	08 95       	ret

00000496 <transmit_frame>:
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     496:	4f 92       	push	r4
     498:	5f 92       	push	r5
     49a:	6f 92       	push	r6
     49c:	7f 92       	push	r7
     49e:	8f 92       	push	r8
     4a0:	af 92       	push	r10
     4a2:	cf 92       	push	r12
     4a4:	ef 92       	push	r14
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     4b2:	a9 e8       	ldi	r26, 0x89	; 137
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	ae 19       	sub	r26, r14
     4b8:	b1 09       	sbc	r27, r1
     4ba:	fd 01       	movw	r30, r26
     4bc:	eb 5d       	subi	r30, 0xDB	; 219
     4be:	fd 4f       	sbci	r31, 0xFD	; 253
     4c0:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     4c2:	ee 20       	and	r14, r14
     4c4:	79 f0       	breq	.+30     	; 0x4e4 <transmit_frame+0x4e>
     4c6:	d8 01       	movw	r26, r16
     4c8:	44 24       	eor	r4, r4
     4ca:	4a 94       	dec	r4
     4cc:	4e 0c       	add	r4, r14
     4ce:	51 2c       	mov	r5, r1
     4d0:	9f ef       	ldi	r25, 0xFF	; 255
     4d2:	49 1a       	sub	r4, r25
     4d4:	59 0a       	sbc	r5, r25
     4d6:	04 0d       	add	r16, r4
     4d8:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     4da:	9d 91       	ld	r25, X+
     4dc:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     4de:	a0 17       	cp	r26, r16
     4e0:	b1 07       	cpc	r27, r17
     4e2:	d9 f7       	brne	.-10     	; 0x4da <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     4e4:	42 30       	cpi	r20, 0x02	; 2
     4e6:	61 f4       	brne	.+24     	; 0x500 <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     4e8:	3b e0       	ldi	r19, 0x0B	; 11
     4ea:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     4ec:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     4ee:	40 91 63 05 	lds	r20, 0x0563	; 0x800563 <tal_pib+0xc>
     4f2:	50 91 64 05 	lds	r21, 0x0564	; 0x800564 <tal_pib+0xd>
     4f6:	5e 93       	st	-X, r21
     4f8:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e8       	ldi	r21, 0x80	; 128
     4fe:	26 c0       	rjmp	.+76     	; 0x54c <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     500:	d3 01       	movw	r26, r6
     502:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     504:	31 e1       	ldi	r19, 0x11	; 17
     506:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     508:	e7 e5       	ldi	r30, 0x57	; 87
     50a:	f5 e0       	ldi	r31, 0x05	; 5
     50c:	90 81       	ld	r25, Z
     50e:	9c 93       	st	X, r25
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	11 96       	adiw	r26, 0x01	; 1
     514:	9c 93       	st	X, r25
     516:	11 97       	sbiw	r26, 0x01	; 1
     518:	92 81       	ldd	r25, Z+2	; 0x02
     51a:	12 96       	adiw	r26, 0x02	; 2
     51c:	9c 93       	st	X, r25
     51e:	12 97       	sbiw	r26, 0x02	; 2
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	13 96       	adiw	r26, 0x03	; 3
     524:	9c 93       	st	X, r25
     526:	13 97       	sbiw	r26, 0x03	; 3
     528:	94 81       	ldd	r25, Z+4	; 0x04
     52a:	14 96       	adiw	r26, 0x04	; 4
     52c:	9c 93       	st	X, r25
     52e:	14 97       	sbiw	r26, 0x04	; 4
     530:	95 81       	ldd	r25, Z+5	; 0x05
     532:	15 96       	adiw	r26, 0x05	; 5
     534:	9c 93       	st	X, r25
     536:	15 97       	sbiw	r26, 0x05	; 5
     538:	96 81       	ldd	r25, Z+6	; 0x06
     53a:	16 96       	adiw	r26, 0x06	; 6
     53c:	9c 93       	st	X, r25
     53e:	16 97       	sbiw	r26, 0x06	; 6
     540:	97 81       	ldd	r25, Z+7	; 0x07
     542:	17 96       	adiw	r26, 0x07	; 7
     544:	9c 93       	st	X, r25
     546:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	59 f4       	brne	.+22     	; 0x566 <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     550:	fb 01       	movw	r30, r22
     552:	80 81       	ld	r24, Z
     554:	91 81       	ldd	r25, Z+1	; 0x01
     556:	fd 01       	movw	r30, r26
     558:	92 93       	st	-Z, r25
     55a:	82 93       	st	-Z, r24
     55c:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     55e:	ca 01       	movw	r24, r20
     560:	80 64       	ori	r24, 0x40	; 64
     562:	98 60       	ori	r25, 0x08	; 8
     564:	0f c0       	rjmp	.+30     	; 0x584 <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     566:	3d 01       	movw	r6, r26
     568:	f8 e0       	ldi	r31, 0x08	; 8
     56a:	6f 1a       	sub	r6, r31
     56c:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     56e:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     570:	88 e0       	ldi	r24, 0x08	; 8
     572:	fb 01       	movw	r30, r22
     574:	d3 01       	movw	r26, r6
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	8a 95       	dec	r24
     57c:	e1 f7       	brne	.-8      	; 0x576 <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     57e:	ca 01       	movw	r24, r20
     580:	80 64       	ori	r24, 0x40	; 64
     582:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
     584:	4e ef       	ldi	r20, 0xFE	; 254
     586:	5a ec       	ldi	r21, 0xCA	; 202
     588:	f3 01       	movw	r30, r6
     58a:	32 97       	sbiw	r30, 0x02	; 2
     58c:	51 83       	std	Z+1, r21	; 0x01
     58e:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
     590:	31 97       	sbiw	r30, 0x01	; 1
     592:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
     594:	c1 10       	cpse	r12, r1
     596:	02 c0       	rjmp	.+4      	; 0x59c <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
     598:	81 60       	ori	r24, 0x01	; 1
     59a:	01 c0       	rjmp	.+2      	; 0x59e <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
     59c:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
     59e:	f3 01       	movw	r30, r6
     5a0:	35 97       	sbiw	r30, 0x05	; 5
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
     5a6:	d3 01       	movw	r26, r6
     5a8:	16 97       	sbiw	r26, 0x06	; 6
     5aa:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
     5ac:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <storage_buffer+0x8>
     5b0:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
     5b4:	48 2d       	mov	r20, r8
     5b6:	6a 2d       	mov	r22, r10
     5b8:	85 e2       	ldi	r24, 0x25	; 37
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <tal_tx_frame>
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ef 90       	pop	r14
     5ca:	cf 90       	pop	r12
     5cc:	af 90       	pop	r10
     5ce:	8f 90       	pop	r8
     5d0:	7f 90       	pop	r7
     5d2:	6f 90       	pop	r6
     5d4:	5f 90       	pop	r5
     5d6:	4f 90       	pop	r4
     5d8:	08 95       	ret

000005da <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length) 
{
     5da:	8f 92       	push	r8
     5dc:	af 92       	push	r10
     5de:	cf 92       	push	r12
     5e0:	ef 92       	push	r14
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	1f 92       	push	r1
     5ec:	1f 92       	push	r1
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
     5f2:	22 e0       	ldi	r18, 0x02	; 2
     5f4:	3a ea       	ldi	r19, 0xAA	; 170
     5f6:	3a 83       	std	Y+2, r19	; 0x02
     5f8:	29 83       	std	Y+1, r18	; 0x01

	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
     5fa:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <seq_num.3026>
     5fe:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <seq_num.3026+0x1>
     602:	a9 01       	movw	r20, r18
     604:	4f 5f       	subi	r20, 0xFF	; 255
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	50 93 24 02 	sts	0x0224, r21	; 0x800224 <seq_num.3026+0x1>
     60c:	40 93 23 02 	sts	0x0223, r20	; 0x800223 <seq_num.3026>
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);

	transmit_frame(
     610:	81 2c       	mov	r8, r1
     612:	68 94       	set
     614:	aa 24       	eor	r10, r10
     616:	a1 f8       	bld	r10, 1
     618:	c1 2c       	mov	r12, r1
     61a:	e6 2e       	mov	r14, r22
     61c:	8c 01       	movw	r16, r24
     61e:	42 e0       	ldi	r20, 0x02	; 2
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	36 df       	rcall	.-404    	; 0x496 <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ef 90       	pop	r14
     638:	cf 90       	pop	r12
     63a:	af 90       	pop	r10
     63c:	8f 90       	pop	r8
     63e:	08 95       	ret

00000640 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     640:	86 e0       	ldi	r24, 0x06	; 6
     642:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <tal_rx_enable>
     646:	08 95       	ret

00000648 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 d0       	rcall	.+0      	; 0x64e <wireless_init+0x6>
     64e:	00 d0       	rcall	.+0      	; 0x650 <wireless_init+0x8>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     654:	3f d0       	rcall	.+126    	; 0x6d4 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     656:	36 d0       	rcall	.+108    	; 0x6c4 <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     658:	b4 d1       	rcall	.+872    	; 0x9c2 <sw_timer_init>
     65a:	85 d5       	rcall	.+2826   	; 0x1166 <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     65c:	81 11       	cpse	r24, r1
     65e:	ff cf       	rjmp	.-2      	; 0x65e <wireless_init+0x16>
     660:	78 94       	sei
     662:	81 e0       	ldi	r24, 0x01	; 1
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     664:	9a ea       	ldi	r25, 0xAA	; 170
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	8e ef       	ldi	r24, 0xFE	; 254
     66c:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     66e:	9c 83       	std	Y+4, r25	; 0x04
     670:	8b 83       	std	Y+3, r24	; 0x03
     672:	82 e1       	ldi	r24, 0x12	; 18
     674:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     676:	1e 82       	std	Y+6, r1	; 0x06
     678:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     67a:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	83 e5       	ldi	r24, 0x53	; 83
     680:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <tal_pib_set>
     684:	be 01       	movw	r22, r28
     686:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	80 e5       	ldi	r24, 0x50	; 80
     68c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <tal_pib_set>
     690:	be 01       	movw	r22, r28
     692:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <tal_pib_set>
     69c:	be 01       	movw	r22, r28
     69e:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <tal_pib_set>
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	80 e0       	ldi	r24, 0x00	; 0
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
     6ac:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <tal_ant_div_config>
     6b0:	c7 df       	rcall	.-114    	; 0x640 <init_data_reception>
    }
    #endif


	init_data_reception();
     6b2:	26 96       	adiw	r28, 0x06	; 6
     6b4:	0f b6       	in	r0, 0x3f	; 63

}
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     6c4:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     6c6:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     6c8:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     6ca:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     6cc:	72 9a       	sbi	0x0e, 2	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     6ce:	6a 9a       	sbi	0x0d, 2	; 13
     6d0:	08 95       	ret

000006d2 <modules_init>:

/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
     6d2:	08 95       	ret

000006d4 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	1f 92       	push	r1
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     6e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6e8:	8f b7       	in	r24, 0x3f	; 63
     6ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     6ec:	f8 94       	cli
	return flags;
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     6f0:	5f 93       	push	r21
     6f2:	50 e8       	ldi	r21, 0x80	; 128
     6f4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     6fe:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     700:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	1f 92       	push	r1
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     714:	9f b7       	in	r25, 0x3f	; 63
     716:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     718:	f8 94       	cli
	return flags;
     71a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     71c:	82 30       	cpi	r24, 0x02	; 2
     71e:	40 f4       	brcc	.+16     	; 0x730 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     720:	e8 2f       	mov	r30, r24
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ec 59       	subi	r30, 0x9C	; 156
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	60 95       	com	r22
     72a:	80 81       	ld	r24, Z
     72c:	68 23       	and	r22, r24
     72e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     730:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     732:	0f 90       	pop	r0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     744:	9f b7       	in	r25, 0x3f	; 63
     746:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     748:	f8 94       	cli
	return flags;
     74a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	38 f4       	brcc	.+14     	; 0x75e <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     750:	e8 2f       	mov	r30, r24
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ec 59       	subi	r30, 0x9C	; 156
     756:	ff 4f       	sbci	r31, 0xFF	; 255
     758:	80 81       	ld	r24, Z
     75a:	68 2b       	or	r22, r24
     75c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     75e:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     768:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <running_timers>
     76c:	88 23       	and	r24, r24
     76e:	19 f0       	breq	.+6      	; 0x776 <hw_expiry_cb+0xe>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <timer_trigger>
     776:	08 95       	ret

00000778 <hw_overflow_cb>:
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	1f 92       	push	r1
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <sys_time>
     788:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <sys_time+0x1>
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <sys_time+0x1>
     792:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <sys_time>
     796:	8f b7       	in	r24, 0x3f	; 63
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	f8 94       	cli
     79c:	19 81       	ldd	r17, Y+1	; 0x01
     79e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <running_timer_queue_head>
     7a2:	8f 3f       	cpi	r24, 0xFF	; 255
     7a4:	e9 f1       	breq	.+122    	; 0x820 <hw_overflow_cb+0xa8>
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	fc 01       	movw	r30, r24
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	9c 01       	movw	r18, r24
     7b0:	22 0f       	add	r18, r18
     7b2:	33 1f       	adc	r19, r19
     7b4:	22 0f       	add	r18, r18
     7b6:	33 1f       	adc	r19, r19
     7b8:	22 0f       	add	r18, r18
     7ba:	33 1f       	adc	r19, r19
     7bc:	e2 0f       	add	r30, r18
     7be:	f3 1f       	adc	r31, r19
     7c0:	e4 5e       	subi	r30, 0xE4	; 228
     7c2:	fa 4f       	sbci	r31, 0xFA	; 250
     7c4:	21 85       	ldd	r18, Z+9	; 0x09
     7c6:	21 11       	cpse	r18, r1
     7c8:	2b c0       	rjmp	.+86     	; 0x820 <hw_overflow_cb+0xa8>
     7ca:	fc 01       	movw	r30, r24
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	e8 0f       	add	r30, r24
     7de:	f9 1f       	adc	r31, r25
     7e0:	e4 5e       	subi	r30, 0xE4	; 228
     7e2:	fa 4f       	sbci	r31, 0xFA	; 250
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	a2 81       	ldd	r26, Z+2	; 0x02
     7ea:	b3 81       	ldd	r27, Z+3	; 0x03
     7ec:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <sys_time>
     7f0:	30 91 1b 05 	lds	r19, 0x051B	; 0x80051b <sys_time+0x1>
     7f4:	2a 17       	cp	r18, r26
     7f6:	3b 07       	cpc	r19, r27
     7f8:	99 f4       	brne	.+38     	; 0x820 <hw_overflow_cb+0xa8>
     7fa:	20 dd       	rcall	.-1472   	; 0x23c <common_tc_delay>
     7fc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <running_timer_queue_head>
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	e8 0f       	add	r30, r24
     816:	f9 1f       	adc	r31, r25
     818:	e4 5e       	subi	r30, 0xE4	; 228
     81a:	fa 4f       	sbci	r31, 0xFA	; 250
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	81 87       	std	Z+9, r24	; 0x09
     820:	1f bf       	out	0x3f, r17	; 63
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	08 95       	ret

0000082c <load_hw_timer>:
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	c8 2f       	mov	r28, r24
     836:	8f 3f       	cpi	r24, 0xFF	; 255
     838:	09 f4       	brne	.+2      	; 0x83c <load_hw_timer+0x10>
     83a:	60 c0       	rjmp	.+192    	; 0x8fc <load_hw_timer+0xd0>
     83c:	00 91 1a 05 	lds	r16, 0x051A	; 0x80051a <sys_time>
     840:	10 91 1b 05 	lds	r17, 0x051B	; 0x80051b <sys_time+0x1>
     844:	b8 dc       	rcall	.-1680   	; 0x1b6 <common_tc_read_count>
     846:	40 91 1a 05 	lds	r20, 0x051A	; 0x80051a <sys_time>
     84a:	50 91 1b 05 	lds	r21, 0x051B	; 0x80051b <sys_time+0x1>
     84e:	04 17       	cp	r16, r20
     850:	15 07       	cpc	r17, r21
     852:	a1 f7       	brne	.-24     	; 0x83c <load_hw_timer+0x10>
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	fe 01       	movw	r30, r28
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	9e 01       	movw	r18, r28
     862:	22 0f       	add	r18, r18
     864:	33 1f       	adc	r19, r19
     866:	22 0f       	add	r18, r18
     868:	33 1f       	adc	r19, r19
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	e2 0f       	add	r30, r18
     870:	f3 1f       	adc	r31, r19
     872:	e4 5e       	subi	r30, 0xE4	; 228
     874:	fa 4f       	sbci	r31, 0xFA	; 250
     876:	ba 01       	movw	r22, r20
     878:	55 27       	eor	r21, r21
     87a:	44 27       	eor	r20, r20
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	48 2b       	or	r20, r24
     882:	59 2b       	or	r21, r25
     884:	6a 2b       	or	r22, r26
     886:	7b 2b       	or	r23, r27
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	a2 81       	ldd	r26, Z+2	; 0x02
     88e:	b3 81       	ldd	r27, Z+3	; 0x03
     890:	84 1b       	sub	r24, r20
     892:	95 0b       	sbc	r25, r21
     894:	a6 0b       	sbc	r26, r22
     896:	b7 0b       	sbc	r27, r23
     898:	8f 3f       	cpi	r24, 0xFF	; 255
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	92 07       	cpc	r25, r18
     89e:	a2 07       	cpc	r26, r18
     8a0:	2f e7       	ldi	r18, 0x7F	; 127
     8a2:	b2 07       	cpc	r27, r18
     8a4:	38 f5       	brcc	.+78     	; 0x8f4 <load_hw_timer+0xc8>
     8a6:	9e 01       	movw	r18, r28
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	fe 01       	movw	r30, r28
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	e2 0f       	add	r30, r18
     8bc:	f3 1f       	adc	r31, r19
     8be:	e4 5e       	subi	r30, 0xE4	; 228
     8c0:	fa 4f       	sbci	r31, 0xFA	; 250
     8c2:	21 85       	ldd	r18, Z+9	; 0x09
     8c4:	21 11       	cpse	r18, r1
     8c6:	1b c0       	rjmp	.+54     	; 0x8fe <load_hw_timer+0xd2>
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	a2 07       	cpc	r26, r18
     8ce:	b1 05       	cpc	r27, r1
     8d0:	b0 f4       	brcc	.+44     	; 0x8fe <load_hw_timer+0xd2>
     8d2:	b4 dc       	rcall	.-1688   	; 0x23c <common_tc_delay>
     8d4:	ce 01       	movw	r24, r28
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	cc 0f       	add	r28, r28
     8dc:	dd 1f       	adc	r29, r29
     8de:	cc 0f       	add	r28, r28
     8e0:	dd 1f       	adc	r29, r29
     8e2:	cc 0f       	add	r28, r28
     8e4:	dd 1f       	adc	r29, r29
     8e6:	c8 0f       	add	r28, r24
     8e8:	d9 1f       	adc	r29, r25
     8ea:	c4 5e       	subi	r28, 0xE4	; 228
     8ec:	da 4f       	sbci	r29, 0xFA	; 250
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <load_hw_timer+0xd2>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <timer_trigger>
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <load_hw_timer+0xd2>
     8fc:	84 dc       	rcall	.-1784   	; 0x206 <common_tc_compare_stop>
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <internal_timer_handler>:
     908:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <timer_trigger>
     90c:	88 23       	and	r24, r24
     90e:	09 f4       	brne	.+2      	; 0x912 <internal_timer_handler+0xa>
     910:	57 c0       	rjmp	.+174    	; 0x9c0 <internal_timer_handler+0xb8>
     912:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <timer_trigger>
     916:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <running_timers>
     91a:	88 23       	and	r24, r24
     91c:	09 f4       	brne	.+2      	; 0x920 <internal_timer_handler+0x18>
     91e:	50 c0       	rjmp	.+160    	; 0x9c0 <internal_timer_handler+0xb8>
     920:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <expired_timer_queue_head>
     924:	8f 3f       	cpi	r24, 0xFF	; 255
     926:	59 f4       	brne	.+22     	; 0x93e <internal_timer_handler+0x36>
     928:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <expired_timer_queue_tail>
     92c:	8f 3f       	cpi	r24, 0xFF	; 255
     92e:	39 f4       	brne	.+14     	; 0x93e <internal_timer_handler+0x36>
     930:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <running_timer_queue_head>
     934:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <expired_timer_queue_tail>
     938:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <expired_timer_queue_head>
     93c:	15 c0       	rjmp	.+42     	; 0x968 <internal_timer_handler+0x60>
     93e:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <running_timer_queue_head>
     942:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <expired_timer_queue_tail>
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	e8 0f       	add	r30, r24
     95c:	f9 1f       	adc	r31, r25
     95e:	e4 5e       	subi	r30, 0xE4	; 228
     960:	fa 4f       	sbci	r31, 0xFA	; 250
     962:	20 87       	std	Z+8, r18	; 0x08
     964:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <expired_timer_queue_tail>
     968:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <running_timer_queue_head>
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	fc 01       	movw	r30, r24
     970:	ee 0f       	add	r30, r30
     972:	ff 1f       	adc	r31, r31
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	e4 5e       	subi	r30, 0xE4	; 228
     986:	fa 4f       	sbci	r31, 0xFA	; 250
     988:	80 85       	ldd	r24, Z+8	; 0x08
     98a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <running_timer_queue_head>
     98e:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <expired_timer_queue_tail>
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	22 0f       	add	r18, r18
     9a4:	33 1f       	adc	r19, r19
     9a6:	e2 0f       	add	r30, r18
     9a8:	f3 1f       	adc	r31, r19
     9aa:	e4 5e       	subi	r30, 0xE4	; 228
     9ac:	fa 4f       	sbci	r31, 0xFA	; 250
     9ae:	9f ef       	ldi	r25, 0xFF	; 255
     9b0:	90 87       	std	Z+8, r25	; 0x08
     9b2:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <running_timers>
     9b6:	91 50       	subi	r25, 0x01	; 1
     9b8:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <running_timers>
     9bc:	91 11       	cpse	r25, r1
     9be:	36 cf       	rjmp	.-404    	; 0x82c <load_hw_timer>
     9c0:	08 95       	ret

000009c2 <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
     9c2:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <running_timers>
	timer_trigger = false;
     9c6:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <timer_trigger>
	sys_time = 0;
     9ca:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <sys_time+0x1>
     9ce:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <sys_time>

	running_timer_queue_head = NO_TIMER;
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
     9d8:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
     9dc:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <expired_timer_queue_tail>
     9e0:	ec e1       	ldi	r30, 0x1C	; 28
     9e2:	f5 e0       	ldi	r31, 0x05	; 5
     9e4:	2e e4       	ldi	r18, 0x4E	; 78
     9e6:	35 e0       	ldi	r19, 0x05	; 5

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
     9e8:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
     9ea:	15 82       	std	Z+5, r1	; 0x05
     9ec:	14 82       	std	Z+4, r1	; 0x04
     9ee:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
     9f0:	e2 17       	cp	r30, r18
     9f2:	f3 07       	cpc	r31, r19
     9f4:	c9 f7       	brne	.-14     	; 0x9e8 <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
     9f6:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
     9fa:	8c eb       	ldi	r24, 0xBC	; 188
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	dc dc       	rcall	.-1608   	; 0x3b8 <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
     a00:	84 eb       	ldi	r24, 0xB4	; 180
     a02:	93 e0       	ldi	r25, 0x03	; 3
	common_tc_init();
     a04:	de dc       	rcall	.-1604   	; 0x3c2 <set_common_tc_expiry_callback>
     a06:	8f cc       	rjmp	.-1762   	; 0x326 <common_tc_init>
     a08:	08 95       	ret

00000a0a <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	1f 92       	push	r1
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a1a:	8f b7       	in	r24, 0x3f	; 63
     a1c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     a1e:	f8 94       	cli
	return flags;
     a20:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
     a22:	72 df       	rcall	.-284    	; 0x908 <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a24:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
     a26:	1f ef       	ldi	r17, 0xFF	; 255
     a28:	01 2f       	mov	r16, r17
     a2a:	37 c0       	rjmp	.+110    	; 0xa9a <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a2c:	8f b7       	in	r24, 0x3f	; 63
     a2e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a30:	f8 94       	cli
	return flags;
     a32:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
     a34:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <expired_timer_queue_head>
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	dc 01       	movw	r26, r24
     a3c:	aa 0f       	add	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	a8 0f       	add	r26, r24
     a4e:	b9 1f       	adc	r27, r25
     a50:	a4 5e       	subi	r26, 0xE4	; 228
     a52:	ba 4f       	sbci	r27, 0xFA	; 250
     a54:	18 96       	adiw	r26, 0x08	; 8
     a56:	9c 91       	ld	r25, X
     a58:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
     a5a:	14 96       	adiw	r26, 0x04	; 4
     a5c:	ed 91       	ld	r30, X+
     a5e:	fc 91       	ld	r31, X
     a60:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
     a62:	16 96       	adiw	r26, 0x06	; 6
     a64:	4d 91       	ld	r20, X+
     a66:	5c 91       	ld	r21, X
     a68:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
     a6a:	18 96       	adiw	r26, 0x08	; 8
     a6c:	1c 93       	st	X, r17
     a6e:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
     a70:	15 96       	adiw	r26, 0x05	; 5
     a72:	1c 92       	st	X, r1
     a74:	1e 92       	st	-X, r1
     a76:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
     a78:	17 96       	adiw	r26, 0x07	; 7
     a7a:	1c 92       	st	X, r1
     a7c:	1e 92       	st	-X, r1
     a7e:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
     a80:	19 96       	adiw	r26, 0x09	; 9
     a82:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
     a84:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
     a88:	9f 3f       	cpi	r25, 0xFF	; 255
     a8a:	11 f4       	brne	.+4      	; 0xa90 <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
     a8c:	00 93 b1 02 	sts	0x02B1, r16	; 0x8002b1 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a90:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
     a92:	30 97       	sbiw	r30, 0x00	; 0
     a94:	11 f0       	breq	.+4      	; 0xa9a <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
     a96:	ca 01       	movw	r24, r20
     a98:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
     a9a:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <expired_timer_queue_head>
     a9e:	8f 3f       	cpi	r24, 0xFF	; 255
     aa0:	29 f6       	brne	.-118    	; 0xa2c <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret

00000ab4 <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
     ab4:	aa cf       	rjmp	.-172    	; 0xa0a <sw_timer_service>
     ab6:	08 95       	ret

00000ab8 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
     abc:	85 eb       	ldi	r24, 0xB5	; 181
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	b0 d0       	rcall	.+352    	; 0xc22 <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     ac2:	ca eb       	ldi	r28, 0xBA	; 186
     ac4:	d2 e0       	ldi	r29, 0x02	; 2
     ac6:	86 ec       	ldi	r24, 0xC6	; 198
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	99 83       	std	Y+1, r25	; 0x01
     acc:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     ace:	be 01       	movw	r22, r28
     ad0:	85 eb       	ldi	r24, 0xB5	; 181
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	ad d0       	rcall	.+346    	; 0xc30 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     ad6:	81 e5       	ldi	r24, 0x51	; 81
     ad8:	93 e0       	ldi	r25, 0x03	; 3
     ada:	9d 83       	std	Y+5, r25	; 0x05
     adc:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     ade:	6e eb       	ldi	r22, 0xBE	; 190
     ae0:	72 e0       	ldi	r23, 0x02	; 2
     ae2:	85 eb       	ldi	r24, 0xB5	; 181
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	a4 d0       	rcall	.+328    	; 0xc30 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
     ae8:	8c ed       	ldi	r24, 0xDC	; 220
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	99 87       	std	Y+9, r25	; 0x09
     aee:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
     af0:	62 ec       	ldi	r22, 0xC2	; 194
     af2:	72 e0       	ldi	r23, 0x02	; 2
     af4:	85 eb       	ldi	r24, 0xB5	; 181
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	9b d0       	rcall	.+310    	; 0xc30 <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	85 eb       	ldi	r24, 0xB5	; 181
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	b8 c0       	rjmp	.+368    	; 0xc7a <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
     b0a:	08 95       	ret

00000b0c <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	21 f0       	breq	.+8      	; 0xb18 <bmm_buffer_free+0xc>
     b10:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
     b12:	85 eb       	ldi	r24, 0xB5	; 181
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	8c c0       	rjmp	.+280    	; 0xc30 <qmm_queue_append>
     b18:	08 95       	ret

00000b1a <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	1f 92       	push	r1
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b38:	2f b7       	in	r18, 0x3f	; 63
     b3a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     b3c:	f8 94       	cli
	return flags;
     b3e:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
     b40:	dc 01       	movw	r26, r24
     b42:	14 96       	adiw	r26, 0x04	; 4
     b44:	2c 91       	ld	r18, X
     b46:	22 23       	and	r18, r18
     b48:	09 f4       	brne	.+2      	; 0xb4c <queue_read_or_remove+0x32>
     b4a:	56 c0       	rjmp	.+172    	; 0xbf8 <queue_read_or_remove+0xde>
     b4c:	7a 01       	movw	r14, r20
     b4e:	96 2e       	mov	r9, r22
     b50:	5c 01       	movw	r10, r24
		buffer_current = q->head;
     b52:	fc 01       	movw	r30, r24
     b54:	00 81       	ld	r16, Z
     b56:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
     b58:	45 2b       	or	r20, r21
     b5a:	e1 f0       	breq	.+56     	; 0xb94 <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
     b5c:	01 15       	cp	r16, r1
     b5e:	11 05       	cpc	r17, r1
     b60:	09 f4       	brne	.+2      	; 0xb64 <queue_read_or_remove+0x4a>
     b62:	4d c0       	rjmp	.+154    	; 0xbfe <queue_read_or_remove+0xe4>
     b64:	68 01       	movw	r12, r16
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
     b68:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
     b6a:	d7 01       	movw	r26, r14
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	6d 91       	ld	r22, X+
     b70:	7c 91       	ld	r23, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	ed 91       	ld	r30, X+
     b76:	fc 91       	ld	r31, X
     b78:	d8 01       	movw	r26, r16
     b7a:	8d 91       	ld	r24, X+
     b7c:	9c 91       	ld	r25, X
     b7e:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
     b80:	81 11       	cpse	r24, r1
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
     b84:	f8 01       	movw	r30, r16
     b86:	22 81       	ldd	r18, Z+2	; 0x02
     b88:	33 81       	ldd	r19, Z+3	; 0x03
     b8a:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	59 f7       	brne	.-42     	; 0xb68 <queue_read_or_remove+0x4e>
     b92:	35 c0       	rjmp	.+106    	; 0xbfe <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
     b94:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
     b96:	01 15       	cp	r16, r1
     b98:	11 05       	cpc	r17, r1
     b9a:	99 f1       	breq	.+102    	; 0xc02 <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
     b9c:	91 10       	cpse	r9, r1
     b9e:	31 c0       	rjmp	.+98     	; 0xc02 <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
     ba0:	d5 01       	movw	r26, r10
     ba2:	8d 91       	ld	r24, X+
     ba4:	9c 91       	ld	r25, X
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	08 17       	cp	r16, r24
     baa:	19 07       	cpc	r17, r25
     bac:	31 f4       	brne	.+12     	; 0xbba <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
     bae:	f8 01       	movw	r30, r16
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	8d 93       	st	X+, r24
     bb6:	9c 93       	st	X, r25
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
     bba:	d8 01       	movw	r26, r16
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	8d 91       	ld	r24, X+
     bc0:	9c 91       	ld	r25, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	f6 01       	movw	r30, r12
     bc6:	93 83       	std	Z+3, r25	; 0x03
     bc8:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
     bca:	d5 01       	movw	r26, r10
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	08 17       	cp	r16, r24
     bd6:	19 07       	cpc	r17, r25
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	dc 92       	st	X, r13
     bde:	ce 92       	st	-X, r12
     be0:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
     be2:	f5 01       	movw	r30, r10
     be4:	84 81       	ldd	r24, Z+4	; 0x04
     be6:	81 50       	subi	r24, 0x01	; 1
     be8:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	89 2b       	or	r24, r25
     bf0:	41 f4       	brne	.+16     	; 0xc02 <queue_read_or_remove+0xe8>
					q->tail = NULL;
     bf2:	13 82       	std	Z+3, r1	; 0x03
     bf4:	12 82       	std	Z+2, r1	; 0x02
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	10 e0       	ldi	r17, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <queue_read_or_remove+0xe8>
     bfe:	00 e0       	ldi	r16, 0x00	; 0
     c00:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c02:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
     c04:	c8 01       	movw	r24, r16
     c06:	0f 90       	pop	r0
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	af 90       	pop	r10
     c1c:	9f 90       	pop	r9
     c1e:	8f 90       	pop	r8
     c20:	08 95       	ret

00000c22 <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
     c22:	fc 01       	movw	r30, r24
	q->head = NULL;
     c24:	11 82       	std	Z+1, r1	; 0x01
     c26:	10 82       	st	Z, r1
	q->tail = NULL;
     c28:	13 82       	std	Z+3, r1	; 0x03
     c2a:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
     c2c:	14 82       	std	Z+4, r1	; 0x04
     c2e:	08 95       	ret

00000c30 <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	1f 92       	push	r1
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c3c:	8f b7       	in	r24, 0x3f	; 63
     c3e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c40:	f8 94       	cli
	return flags;
     c42:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
     c44:	84 81       	ldd	r24, Z+4	; 0x04
     c46:	81 11       	cpse	r24, r1
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
     c4a:	71 83       	std	Z+1, r23	; 0x01
     c4c:	60 83       	st	Z, r22
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
     c50:	a2 81       	ldd	r26, Z+2	; 0x02
     c52:	b3 81       	ldd	r27, Z+3	; 0x03
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	7c 93       	st	X, r23
     c58:	6e 93       	st	-X, r22
     c5a:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
     c5c:	73 83       	std	Z+3, r23	; 0x03
     c5e:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
     c60:	db 01       	movw	r26, r22
     c62:	13 96       	adiw	r26, 0x03	; 3
     c64:	1c 92       	st	X, r1
     c66:	1e 92       	st	-X, r1
     c68:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c70:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
     c72:	0f 90       	pop	r0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
     c7a:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	4d cf       	rjmp	.-358    	; 0xb1a <queue_read_or_remove>
}
     c80:	08 95       	ret

00000c82 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     c84:	61 50       	subi	r22, 0x01	; 1
     c86:	71 09       	sbc	r23, r1
     c88:	81 09       	sbc	r24, r1
     c8a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c8c:	61 15       	cp	r22, r1
     c8e:	71 05       	cpc	r23, r1
     c90:	81 05       	cpc	r24, r1
     c92:	91 05       	cpc	r25, r1
     c94:	b9 f7       	brne	.-18     	; 0xc84 <__portable_avr_delay_cycles+0x2>
     c96:	08 95       	ret

00000c98 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
     c9e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ca2:	8f 71       	andi	r24, 0x1F	; 31
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	a1 f4       	brne	.+40     	; 0xcd0 <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     cae:	89 e0       	ldi	r24, 0x09	; 9
     cb0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cb4:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
     cb6:	0f e4       	ldi	r16, 0x4F	; 79
     cb8:	11 e0       	ldi	r17, 0x01	; 1
     cba:	f8 01       	movw	r30, r16
     cbc:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
     cbe:	80 fd       	sbrc	r24, 0
     cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
     cc2:	63 e9       	ldi	r22, 0x93	; 147
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	db df       	rcall	.-74     	; 0xc82 <__portable_avr_delay_cycles>
     ccc:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
     cce:	a9 f7       	brne	.-22     	; 0xcba <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	1f 92       	push	r1
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
     ce6:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     cea:	8f 30       	cpi	r24, 0x0F	; 15
     cec:	51 f5       	brne	.+84     	; 0xd42 <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
     cee:	1f 30       	cpi	r17, 0x0F	; 15
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <set_trx_state+0x1c>
     cf2:	38 c1       	rjmp	.+624    	; 0xf64 <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
     cf4:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
     cf8:	81 ea       	ldi	r24, 0xA1	; 161
     cfa:	9a e0       	ldi	r25, 0x0A	; 10
     cfc:	e1 d2       	rcall	.+1474   	; 0x12c0 <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cfe:	8f b7       	in	r24, 0x3f	; 63
     d00:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d02:	f8 94       	cli
	return flags;
     d04:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
     d06:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
     d08:	e9 e3       	ldi	r30, 0x39	; 57
     d0a:	f1 e0       	ldi	r31, 0x01	; 1
     d0c:	80 81       	ld	r24, Z
     d0e:	8d 7f       	andi	r24, 0xFD	; 253
     d10:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
     d12:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <tal_awake_end_flag>
     d16:	88 23       	and	r24, r24
     d18:	e1 f3       	breq	.-8      	; 0xd12 <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d1a:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
     d22:	88 e4       	ldi	r24, 0x48	; 72
     d24:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
     d28:	ed e4       	ldi	r30, 0x4D	; 77
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	80 81       	ld	r24, Z
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
     d32:	18 30       	cpi	r17, 0x08	; 8
     d34:	11 f0       	breq	.+4      	; 0xd3a <set_trx_state+0x62>
     d36:	13 30       	cpi	r17, 0x03	; 3
     d38:	21 f4       	brne	.+8      	; 0xd42 <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
     d3a:	88 e0       	ldi	r24, 0x08	; 8
     d3c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>
			return TRX_OFF;
     d40:	11 c1       	rjmp	.+546    	; 0xf64 <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
     d42:	81 2f       	mov	r24, r17
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	fc 01       	movw	r30, r24
     d48:	33 97       	sbiw	r30, 0x03	; 3
     d4a:	e7 31       	cpi	r30, 0x17	; 23
     d4c:	f1 05       	cpc	r31, r1
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <set_trx_state+0x7a>
     d50:	5a c0       	rjmp	.+180    	; 0xe06 <set_trx_state+0x12e>
     d52:	88 27       	eor	r24, r24
     d54:	e6 56       	subi	r30, 0x66	; 102
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
     d64:	ed e4       	ldi	r30, 0x4D	; 77
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	80 81       	ld	r24, Z
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
     d6e:	0e 94 3c 14 	call	0x2878	; 0x2878 <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
     d72:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
			trx_bit_write(SR_CSMA_SEED_1,
     d76:	ee e6       	ldi	r30, 0x6E	; 110
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	80 81       	ld	r24, Z
     d7c:	97 70       	andi	r25, 0x07	; 7
     d7e:	88 7f       	andi	r24, 0xF8	; 248
     d80:	89 2b       	or	r24, r25
     d82:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
     d8a:	80 e8       	ldi	r24, 0x80	; 128
     d8c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>

		PAL_WAIT_1_US();
     d90:	62 e0       	ldi	r22, 0x02	; 2
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	74 df       	rcall	.-280    	; 0xc82 <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
     d9a:	e9 e3       	ldi	r30, 0x39	; 57
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	80 81       	ld	r24, Z
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
     da4:	6f e2       	ldi	r22, 0x2F	; 47
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	6a df       	rcall	.-300    	; 0xc82 <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
     dae:	8f e0       	ldi	r24, 0x0F	; 15
     db0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
     db4:	d7 c0       	rjmp	.+430    	; 0xf64 <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
     db6:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     dba:	88 30       	cpi	r24, 0x08	; 8
     dbc:	21 f1       	breq	.+72     	; 0xe06 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
     dbe:	88 e0       	ldi	r24, 0x08	; 8
     dc0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	5a df       	rcall	.-332    	; 0xc82 <__portable_avr_delay_cycles>
			break;
     dce:	1b c0       	rjmp	.+54     	; 0xe06 <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
     dd0:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	b9 f0       	breq	.+46     	; 0xe06 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     dde:	62 e0       	ldi	r22, 0x02	; 2
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	4d df       	rcall	.-358    	; 0xc82 <__portable_avr_delay_cycles>
			break;
     de8:	0e c0       	rjmp	.+28     	; 0xe06 <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
     dea:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     dee:	88 30       	cpi	r24, 0x08	; 8
     df0:	49 f0       	breq	.+18     	; 0xe04 <set_trx_state+0x12c>
     df2:	18 f4       	brcc	.+6      	; 0xdfa <set_trx_state+0x122>
     df4:	86 30       	cpi	r24, 0x06	; 6
     df6:	39 f4       	brne	.+14     	; 0xe06 <set_trx_state+0x12e>
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <set_trx_state+0x134>
     dfa:	86 31       	cpi	r24, 0x16	; 22
     dfc:	39 f0       	breq	.+14     	; 0xe0c <set_trx_state+0x134>
     dfe:	89 31       	cpi	r24, 0x19	; 25
     e00:	11 f4       	brne	.+4      	; 0xe06 <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <set_trx_state+0x134>
     e04:	49 df       	rcall	.-366    	; 0xc98 <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
     e06:	e1 e4       	ldi	r30, 0x41	; 65
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	a6 c0       	rjmp	.+332    	; 0xf58 <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     e0c:	89 e0       	ldi	r24, 0x09	; 9
     e0e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	33 df       	rcall	.-410    	; 0xc82 <__portable_avr_delay_cycles>
			break;
     e1c:	f4 cf       	rjmp	.-24     	; 0xe06 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
     e1e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     e22:	88 30       	cpi	r24, 0x08	; 8
     e24:	19 f0       	breq	.+6      	; 0xe2c <set_trx_state+0x154>
     e26:	89 30       	cpi	r24, 0x09	; 9
     e28:	71 f3       	breq	.-36     	; 0xe06 <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <set_trx_state+0x158>
     e2c:	35 df       	rcall	.-406    	; 0xc98 <switch_pll_on>
			break;
     e2e:	eb cf       	rjmp	.-42     	; 0xe06 <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			break;
     e36:	e7 cf       	rjmp	.-50     	; 0xe06 <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
     e38:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     e3c:	89 30       	cpi	r24, 0x09	; 9
     e3e:	41 f0       	breq	.+16     	; 0xe50 <set_trx_state+0x178>
     e40:	18 f4       	brcc	.+6      	; 0xe48 <set_trx_state+0x170>
     e42:	88 30       	cpi	r24, 0x08	; 8
     e44:	71 f0       	breq	.+28     	; 0xe62 <set_trx_state+0x18a>
     e46:	df cf       	rjmp	.-66     	; 0xe06 <set_trx_state+0x12e>
     e48:	86 31       	cpi	r24, 0x16	; 22
     e4a:	11 f0       	breq	.+4      	; 0xe50 <set_trx_state+0x178>
     e4c:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
     e4e:	d9 f6       	brne	.-74     	; 0xe06 <set_trx_state+0x12e>
     e50:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
     e52:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e56:	62 e0       	ldi	r22, 0x02	; 2
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
     e5e:	11 df       	rcall	.-478    	; 0xc82 <__portable_avr_delay_cycles>
     e60:	d2 cf       	rjmp	.-92     	; 0xe06 <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
     e62:	1a df       	rcall	.-460    	; 0xc98 <switch_pll_on>
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	07 df       	rcall	.-498    	; 0xc82 <__portable_avr_delay_cycles>
			break;
     e74:	c8 cf       	rjmp	.-112    	; 0xe06 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
     e76:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	91 f0       	breq	.+36     	; 0xea2 <set_trx_state+0x1ca>
     e7e:	18 f4       	brcc	.+6      	; 0xe86 <set_trx_state+0x1ae>
     e80:	86 30       	cpi	r24, 0x06	; 6
     e82:	c9 f0       	breq	.+50     	; 0xeb6 <set_trx_state+0x1de>
     e84:	c0 cf       	rjmp	.-128    	; 0xe06 <set_trx_state+0x12e>
     e86:	89 30       	cpi	r24, 0x09	; 9
     e88:	19 f0       	breq	.+6      	; 0xe90 <set_trx_state+0x1b8>
     e8a:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     e8c:	09 f0       	breq	.+2      	; 0xe90 <set_trx_state+0x1b8>
     e8e:	bb cf       	rjmp	.-138    	; 0xe06 <set_trx_state+0x12e>
     e90:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
     e92:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e96:	62 e0       	ldi	r22, 0x02	; 2
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	80 e0       	ldi	r24, 0x00	; 0
			break;
     e9c:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
     e9e:	f1 de       	rcall	.-542    	; 0xc82 <__portable_avr_delay_cycles>
     ea0:	b2 cf       	rjmp	.-156    	; 0xe06 <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     ea2:	fa de       	rcall	.-524    	; 0xc98 <switch_pll_on>
     ea4:	86 e1       	ldi	r24, 0x16	; 22
     ea6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
			break;
     eb2:	e7 de       	rcall	.-562    	; 0xc82 <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     eb4:	a8 cf       	rjmp	.-176    	; 0xe06 <set_trx_state+0x12e>
     eb6:	89 e0       	ldi	r24, 0x09	; 9
     eb8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	de de       	rcall	.-580    	; 0xc82 <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
     ec6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     eca:	8f 71       	andi	r24, 0x1F	; 31
     ecc:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
     ed0:	89 30       	cpi	r24, 0x09	; 9
     ed2:	09 f0       	breq	.+2      	; 0xed6 <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
     ed4:	47 c0       	rjmp	.+142    	; 0xf64 <set_trx_state+0x28c>
     ed6:	86 e1       	ldi	r24, 0x16	; 22
     ed8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     edc:	62 e0       	ldi	r22, 0x02	; 2
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	ce de       	rcall	.-612    	; 0xc82 <__portable_avr_delay_cycles>
			break;
     ee6:	8f cf       	rjmp	.-226    	; 0xe06 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
     ee8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <tal_trx_status>
     eec:	88 30       	cpi	r24, 0x08	; 8
     eee:	51 f1       	breq	.+84     	; 0xf44 <set_trx_state+0x26c>
     ef0:	18 f4       	brcc	.+6      	; 0xef8 <set_trx_state+0x220>
     ef2:	86 30       	cpi	r24, 0x06	; 6
     ef4:	79 f0       	breq	.+30     	; 0xf14 <set_trx_state+0x23c>
     ef6:	87 cf       	rjmp	.-242    	; 0xe06 <set_trx_state+0x12e>
     ef8:	89 30       	cpi	r24, 0x09	; 9
     efa:	19 f0       	breq	.+6      	; 0xf02 <set_trx_state+0x22a>
     efc:	86 31       	cpi	r24, 0x16	; 22
     efe:	51 f0       	breq	.+20     	; 0xf14 <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     f00:	82 cf       	rjmp	.-252    	; 0xe06 <set_trx_state+0x12e>
     f02:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
     f04:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f08:	62 e0       	ldi	r22, 0x02	; 2
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
			break;
     f10:	b8 de       	rcall	.-656    	; 0xc82 <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
     f12:	79 cf       	rjmp	.-270    	; 0xe06 <set_trx_state+0x12e>
     f14:	89 e0       	ldi	r24, 0x09	; 9
     f16:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	af de       	rcall	.-674    	; 0xc82 <__portable_avr_delay_cycles>
     f24:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f28:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
     f2a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     f2e:	89 30       	cpi	r24, 0x09	; 9
     f30:	c9 f4       	brne	.+50     	; 0xf64 <set_trx_state+0x28c>
			PAL_WAIT_1_US();
     f32:	89 e1       	ldi	r24, 0x19	; 25
     f34:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f3e:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
     f40:	a0 de       	rcall	.-704    	; 0xc82 <__portable_avr_delay_cycles>
     f42:	61 cf       	rjmp	.-318    	; 0xe06 <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
     f44:	a9 de       	rcall	.-686    	; 0xc98 <switch_pll_on>
     f46:	89 e1       	ldi	r24, 0x19	; 25
     f48:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
			PAL_WAIT_1_US();
     f4c:	62 e0       	ldi	r22, 0x02	; 2
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	96 de       	rcall	.-724    	; 0xc82 <__portable_avr_delay_cycles>
			break;
     f56:	57 cf       	rjmp	.-338    	; 0xe06 <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
     f58:	80 81       	ld	r24, Z
     f5a:	8f 71       	andi	r24, 0x1F	; 31
     f5c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
     f60:	8f 31       	cpi	r24, 0x1F	; 31
     f62:	d1 f3       	breq	.-12     	; 0xf58 <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
     f64:	0f 90       	pop	r0
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	08 95       	ret

00000f6e <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
     f72:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <tal_rx_on_required>
     f76:	88 23       	and	r24, r24
     f78:	19 f1       	breq	.+70     	; 0xfc0 <tal_task+0x52>
     f7a:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <tal_state>
     f7e:	81 11       	cpse	r24, r1
     f80:	1f c0       	rjmp	.+62     	; 0xfc0 <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
     f82:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <tal_rx_buffer>
     f86:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <tal_rx_buffer+0x1>
     f8a:	89 2b       	or	r24, r25
     f8c:	41 f4       	brne	.+16     	; 0xf9e <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
     f8e:	8b e8       	ldi	r24, 0x8B	; 139
     f90:	b7 dd       	rcall	.-1170   	; 0xb00 <bmm_buffer_alloc>
     f92:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <tal_rx_buffer+0x1>
     f96:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
     f9a:	89 2b       	or	r24, r25
     f9c:	89 f0       	breq	.+34     	; 0xfc0 <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
     f9e:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
     fa2:	cc e4       	ldi	r28, 0x4C	; 76
     fa4:	d1 e0       	ldi	r29, 0x01	; 1
     fa6:	88 81       	ld	r24, Y
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
     fac:	63 e0       	ldi	r22, 0x03	; 3
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	66 de       	rcall	.-820    	; 0xc82 <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
     fb6:	88 81       	ld	r24, Y
     fb8:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
     fba:	88 83       	st	Y, r24
     fbc:	86 e1       	ldi	r24, 0x16	; 22
     fbe:	8c de       	rcall	.-744    	; 0xcd8 <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
     fc0:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <tal_incoming_frame_queue+0x4>
     fc4:	88 23       	and	r24, r24
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e5       	ldi	r24, 0x50	; 80
     fce:	95 e0       	ldi	r25, 0x05	; 5
		if (NULL != rx_frame) {
     fd0:	54 de       	rcall	.-856    	; 0xc7a <qmm_queue_remove>
     fd2:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
     fd6:	24 d5       	rcall	.+2632   	; 0x1a20 <process_incoming_frame>
     fd8:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <tal_state>
     fdc:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
     fde:	09 f4       	brne	.+2      	; 0xfe2 <tal_task+0x74>
     fe0:	85 d5       	rcall	.+2826   	; 0x1aec <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     fea:	61 50       	subi	r22, 0x01	; 1
     fec:	71 09       	sbc	r23, r1
     fee:	81 09       	sbc	r24, r1
     ff0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     ff2:	61 15       	cp	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	81 05       	cpc	r24, r1
     ff8:	91 05       	cpc	r25, r1
     ffa:	b9 f7       	brne	.-18     	; 0xfea <__portable_avr_delay_cycles+0x2>
     ffc:	08 95       	ret

00000ffe <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	66 de       	rcall	.-820    	; 0xcd8 <set_trx_state>
	} while (trx_state != RX_ON);
    100c:	86 30       	cpi	r24, 0x06	; 6
    100e:	e1 f7       	brne	.-8      	; 0x1008 <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    1010:	e5 e5       	ldi	r30, 0x55	; 85
    1012:	f1 e0       	ldi	r31, 0x01	; 1
    1014:	80 81       	ld	r24, Z
    1016:	8f 77       	andi	r24, 0x7F	; 127
    1018:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    101a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    101e:	68 94       	set
    1020:	ff 24       	eor	r15, r15
    1022:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    1028:	06 e4       	ldi	r16, 0x46	; 70
    102a:	11 e0       	ldi	r17, 0x01	; 1
    102c:	f8 01       	movw	r30, r16
    102e:	90 81       	ld	r25, Z
		seed = seed << 2;
    1030:	cc 0f       	add	r28, r28
    1032:	dd 1f       	adc	r29, r29
    1034:	cc 0f       	add	r28, r28
    1036:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    1038:	90 76       	andi	r25, 0x60	; 96
    103a:	29 2f       	mov	r18, r25
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	36 95       	lsr	r19
    1040:	27 95       	ror	r18
    1042:	32 95       	swap	r19
    1044:	22 95       	swap	r18
    1046:	2f 70       	andi	r18, 0x0F	; 15
    1048:	23 27       	eor	r18, r19
    104a:	3f 70       	andi	r19, 0x0F	; 15
    104c:	23 27       	eor	r18, r19
    104e:	c2 2b       	or	r28, r18
    1050:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	c6 df       	rcall	.-116    	; 0xfe8 <__portable_avr_delay_cycles>
    105c:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    105e:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    1060:	e5 cf       	rjmp	.-54     	; 0x102c <tal_generate_rand_seed+0x2e>
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	39 de       	rcall	.-910    	; 0xcd8 <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    106c:	88 e4       	ldi	r24, 0x48	; 72
    106e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 3f 14 	call	0x287e	; 0x287e <srand>
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	08 95       	ret

00001084 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    1090:	c9 e3       	ldi	r28, 0x39	; 57
    1092:	d1 e0       	ldi	r29, 0x01	; 1
    1094:	88 81       	ld	r24, Y
    1096:	8d 7f       	andi	r24, 0xFD	; 253
    1098:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    109a:	61 e4       	ldi	r22, 0x41	; 65
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a2 df       	rcall	.-188    	; 0xfe8 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    10a4:	88 81       	ld	r24, Y
    10a6:	8e 7f       	andi	r24, 0xFE	; 254
    10a8:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    10aa:	62 e0       	ldi	r22, 0x02	; 2
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9a df       	rcall	.-204    	; 0xfe8 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    10b4:	88 81       	ld	r24, Y
    10b6:	81 60       	ori	r24, 0x01	; 1
    10b8:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    10ba:	66 e8       	ldi	r22, 0x86	; 134
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	92 df       	rcall	.-220    	; 0xfe8 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    10c4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10c8:	8f 71       	andi	r24, 0x1F	; 31
    10ca:	ca e0       	ldi	r28, 0x0A	; 10
    10cc:	01 e4       	ldi	r16, 0x41	; 65
    10ce:	11 e0       	ldi	r17, 0x01	; 1
    10d0:	0a c0       	rjmp	.+20     	; 0x10e6 <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    10d2:	66 e8       	ldi	r22, 0x86	; 134
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	86 df       	rcall	.-244    	; 0xfe8 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    10dc:	f8 01       	movw	r30, r16
    10de:	80 81       	ld	r24, Z
    10e0:	8f 71       	andi	r24, 0x1F	; 31
    10e2:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    10e4:	c9 f1       	breq	.+114    	; 0x1158 <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    10e6:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    10e8:	a1 f7       	brne	.-24     	; 0x10d2 <internal_tal_reset+0x4e>
    10ea:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    10ee:	87 df       	rcall	.-242    	; 0xffe <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    10f0:	0e 94 3c 14 	call	0x2878	; 0x2878 <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    10f4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    10f8:	ee e6       	ldi	r30, 0x6E	; 110
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	80 81       	ld	r24, Z
    10fe:	97 70       	andi	r25, 0x07	; 7
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	89 2b       	or	r24, r25
    1104:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    1106:	80 81       	ld	r24, Z
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    110c:	ec e4       	ldi	r30, 0x4C	; 76
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	80 81       	ld	r24, Z
    1112:	80 68       	ori	r24, 0x80	; 128
    1114:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1116:	88 e4       	ldi	r24, 0x48	; 72
    1118:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    1122:	ed e4       	ldi	r30, 0x4D	; 77
    1124:	f1 e0       	ldi	r31, 0x01	; 1
    1126:	80 81       	ld	r24, Z
    1128:	8c 7f       	andi	r24, 0xFC	; 252
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    112e:	aa e4       	ldi	r26, 0x4A	; 74
    1130:	b1 e0       	ldi	r27, 0x01	; 1
    1132:	8c 91       	ld	r24, X
    1134:	80 7f       	andi	r24, 0xF0	; 240
    1136:	83 60       	ori	r24, 0x03	; 3
    1138:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    113a:	80 81       	ld	r24, Z
    113c:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    113e:	80 83       	st	Z, r24
    1140:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    1142:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    1144:	80 83       	st	Z, r24
    1146:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    1148:	30 d2       	rcall	.+1120   	; 0x15aa <init_tal_pib>
    114a:	7d d2       	rcall	.+1274   	; 0x1646 <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    114c:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    1150:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <tal_rx_on_required>

	return MAC_SUCCESS;
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	01 c0       	rjmp	.+2      	; 0x115a <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1158:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	08 95       	ret

00001166 <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
	MCUSR = 0;
    1176:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    1178:	80 e1       	ldi	r24, 0x10	; 16
    117a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	DRTRAM1 = _BV(ENDRT);
    117e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
	DRTRAM2 = _BV(ENDRT);
    1182:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x700133>
	DRTRAM3 = _BV(ENDRT);
    1186:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    118a:	92 dc       	rcall	.-1756   	; 0xab0 <pal_init>
    118c:	81 11       	cpse	r24, r1
    118e:	6d c0       	rjmp	.+218    	; 0x126a <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    1190:	60 e4       	ldi	r22, 0x40	; 64
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	ba da       	rcall	.-2700   	; 0x70a <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    1196:	c9 e3       	ldi	r28, 0x39	; 57
    1198:	d1 e0       	ldi	r29, 0x01	; 1
    119a:	88 81       	ld	r24, Y
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    11a0:	88 81       	ld	r24, Y
    11a2:	8d 7f       	andi	r24, 0xFD	; 253
    11a4:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    11a6:	6b ef       	ldi	r22, 0xFB	; 251
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	1c df       	rcall	.-456    	; 0xfe8 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    11b0:	88 81       	ld	r24, Y
    11b2:	8e 7f       	andi	r24, 0xFE	; 254
    11b4:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	14 df       	rcall	.-472    	; 0xfe8 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    11c0:	88 81       	ld	r24, Y
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    11c6:	66 e8       	ldi	r22, 0x86	; 134
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0c df       	rcall	.-488    	; 0xfe8 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    11d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    11d4:	8f 71       	andi	r24, 0x1F	; 31
    11d6:	ca e0       	ldi	r28, 0x0A	; 10
    11d8:	01 e4       	ldi	r16, 0x41	; 65
    11da:	11 e0       	ldi	r17, 0x01	; 1

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    11dc:	0b c0       	rjmp	.+22     	; 0x11f4 <tal_init+0x8e>
    11de:	66 e8       	ldi	r22, 0x86	; 134
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	00 df       	rcall	.-512    	; 0xfe8 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    11e8:	f8 01       	movw	r30, r16
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 71       	andi	r24, 0x1F	; 31
    11ee:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <tal_init+0x8e>
    11f2:	51 c0       	rjmp	.+162    	; 0x1296 <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	99 f7       	brne	.-26     	; 0x11de <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    11f8:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    11fc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x70015c>
    1200:	84 39       	cpi	r24, 0x94	; 148
    1202:	09 f0       	breq	.+2      	; 0x1206 <tal_init+0xa0>
    1204:	48 c0       	rjmp	.+144    	; 0x1296 <tal_init+0x130>
    1206:	35 c0       	rjmp	.+106    	; 0x1272 <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    1208:	0e 94 3c 14 	call	0x2878	; 0x2878 <rand>
    120c:	f8 01       	movw	r30, r16
    120e:	81 93       	st	Z+, r24
    1210:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1212:	ec 15       	cp	r30, r12
    1214:	fd 05       	cpc	r31, r13
    1216:	c1 f7       	brne	.-16     	; 0x1208 <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1218:	f7 01       	movw	r30, r14
    121a:	20 81       	ld	r18, Z
    121c:	31 81       	ldd	r19, Z+1	; 0x01
    121e:	42 81       	ldd	r20, Z+2	; 0x02
    1220:	53 81       	ldd	r21, Z+3	; 0x03
    1222:	64 81       	ldd	r22, Z+4	; 0x04
    1224:	75 81       	ldd	r23, Z+5	; 0x05
    1226:	86 81       	ldd	r24, Z+6	; 0x06
    1228:	97 81       	ldd	r25, Z+7	; 0x07
    122a:	af ef       	ldi	r26, 0xFF	; 255
    122c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__adddi3_s8>
    1230:	ad ef       	ldi	r26, 0xFD	; 253
    1232:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__cmpdi2_s8>
    1236:	21 f0       	breq	.+8      	; 0x1240 <tal_init+0xda>
    1238:	18 f0       	brcs	.+6      	; 0x1240 <tal_init+0xda>
    123a:	07 e5       	ldi	r16, 0x57	; 87
    123c:	15 e0       	ldi	r17, 0x05	; 5

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    123e:	e4 cf       	rjmp	.-56     	; 0x1208 <tal_init+0xa2>
    1240:	8f e7       	ldi	r24, 0x7F	; 127
    1242:	9a e0       	ldi	r25, 0x0A	; 10
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1244:	38 d0       	rcall	.+112    	; 0x12b6 <pal_trx_irq_init_rx_end>
    1246:	80 e9       	ldi	r24, 0x90	; 144
    1248:	9a e0       	ldi	r25, 0x0A	; 10
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    124a:	30 d0       	rcall	.+96     	; 0x12ac <pal_trx_irq_init_tx_end>
    124c:	81 ea       	ldi	r24, 0xA1	; 161
    124e:	9a e0       	ldi	r25, 0x0A	; 10
    1250:	37 d0       	rcall	.+110    	; 0x12c0 <pal_trx_irq_init_awake>
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1252:	32 dc       	rcall	.-1948   	; 0xab8 <bmm_buffer_init>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1254:	8b e8       	ldi	r24, 0x8B	; 139
    1256:	54 dc       	rcall	.-1880   	; 0xb00 <bmm_buffer_alloc>
    1258:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <tal_rx_buffer+0x1>
    125c:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    1260:	80 e5       	ldi	r24, 0x50	; 80
    1262:	95 e0       	ldi	r25, 0x05	; 5
    1264:	de dc       	rcall	.-1604   	; 0xc22 <qmm_queue_init>
    1266:	cb d5       	rcall	.+2966   	; 0x1dfe <tfa_init>
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    1268:	17 c0       	rjmp	.+46     	; 0x1298 <tal_init+0x132>
    126a:	c5 e8       	ldi	r28, 0x85	; 133
#endif

	return MAC_SUCCESS;
    126c:	15 c0       	rjmp	.+42     	; 0x1298 <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    126e:	c5 e8       	ldi	r28, 0x85	; 133
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	07 df       	rcall	.-498    	; 0x1084 <internal_tal_reset>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    1276:	c8 2f       	mov	r28, r24
    1278:	81 11       	cpse	r24, r1
    127a:	f9 cf       	rjmp	.-14     	; 0x126e <tal_init+0x108>
    127c:	0f 2e       	mov	r0, r31
    127e:	f7 e5       	ldi	r31, 0x57	; 87
    1280:	ef 2e       	mov	r14, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1282:	f5 e0       	ldi	r31, 0x05	; 5
    1284:	ff 2e       	mov	r15, r31
    1286:	f0 2d       	mov	r31, r0
    1288:	0f 2e       	mov	r0, r31
    128a:	ff e5       	ldi	r31, 0x5F	; 95
    128c:	cf 2e       	mov	r12, r31
    128e:	f5 e0       	ldi	r31, 0x05	; 5
    1290:	df 2e       	mov	r13, r31
    1292:	f0 2d       	mov	r31, r0
    1294:	c1 cf       	rjmp	.-126    	; 0x1218 <tal_init+0xb2>
    1296:	c5 e8       	ldi	r28, 0x85	; 133
    1298:	8c 2f       	mov	r24, r28
    129a:	df 91       	pop	r29
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    129c:	cf 91       	pop	r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

000012ac <pal_trx_irq_init_tx_end>:
    12ac:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <irq_hdl_trx_tx_end+0x1>
    12b0:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <irq_hdl_trx_tx_end>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    12b4:	08 95       	ret

000012b6 <pal_trx_irq_init_rx_end>:
    12b6:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <irq_hdl_trx_rx_end+0x1>
    12ba:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <irq_hdl_trx_rx_end>
    12be:	08 95       	ret

000012c0 <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    12c0:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <irq_hdl_trx_awake+0x1>
    12c4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <irq_hdl_trx_awake>
    12c8:	08 95       	ret

000012ca <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	0b b6       	in	r0, 0x3b	; 59
    12d6:	0f 92       	push	r0
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    12f0:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <irq_hdl_trx_tx_end>
    12f4:	f0 91 70 04 	lds	r31, 0x0470	; 0x800470 <irq_hdl_trx_tx_end+0x1>
    12f8:	19 95       	eicall
}
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	0b be       	out	0x3b, r0	; 59
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	0f 90       	pop	r0
    131c:	1f 90       	pop	r1
    131e:	18 95       	reti

00001320 <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	0f 92       	push	r0
    1328:	11 24       	eor	r1, r1
    132a:	0b b6       	in	r0, 0x3b	; 59
    132c:	0f 92       	push	r0
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    1346:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <irq_hdl_trx_rx_end>
    134a:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <irq_hdl_trx_rx_end+0x1>
    134e:	19 95       	eicall
}
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	0b b6       	in	r0, 0x3b	; 59
    1382:	0f 92       	push	r0
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    139c:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <irq_hdl_trx_cca_ed>
    13a0:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <irq_hdl_trx_cca_ed+0x1>
    13a4:	19 95       	eicall
}
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0b be       	out	0x3b, r0	; 59
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	0b b6       	in	r0, 0x3b	; 59
    13d8:	0f 92       	push	r0
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
	irq_hdl_trx_awake();
    13f2:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <irq_hdl_trx_awake>
    13f6:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <irq_hdl_trx_awake+0x1>
    13fa:	19 95       	eicall
}
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	0f 90       	pop	r0
    1482:	1f 90       	pop	r1
    1484:	18 95       	reti

00001486 <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    1486:	1f 92       	push	r1
    1488:	0f 92       	push	r0
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	0f 92       	push	r0
    148e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    149a:	1f 92       	push	r1
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	0f 90       	pop	r0
    14e6:	1f 90       	pop	r1
    14e8:	18 95       	reti

000014ea <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    150a:	8f b7       	in	r24, 0x3f	; 63
    150c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    150e:	f8 94       	cli
	return flags;
    1510:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    1512:	19 d2       	rcall	.+1074   	; 0x1946 <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1514:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	08 95       	ret

00001520 <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	1f 92       	push	r1
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    152c:	8f b7       	in	r24, 0x3f	; 63
    152e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1530:	f8 94       	cli
	return flags;
    1532:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    1534:	a6 d3       	rcall	.+1868   	; 0x1c82 <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1536:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	08 95       	ret

00001542 <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <tal_awake_end_flag>
    1548:	08 95       	ret

0000154a <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    154a:	85 fd       	sbrc	r24, 5
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <limit_tx_pwr+0xa>
    154e:	98 2f       	mov	r25, r24
    1550:	9f 73       	andi	r25, 0x3F	; 63
    1552:	04 c0       	rjmp	.+8      	; 0x155c <limit_tx_pwr+0x12>
    1554:	98 2f       	mov	r25, r24
    1556:	91 95       	neg	r25
    1558:	9f 71       	andi	r25, 0x1F	; 31
    155a:	91 95       	neg	r25
    155c:	e2 e6       	ldi	r30, 0x62	; 98
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	24 91       	lpm	r18, Z
    1562:	29 17       	cp	r18, r25
    1564:	54 f4       	brge	.+20     	; 0x157a <limit_tx_pwr+0x30>
    1566:	84 91       	lpm	r24, Z
    1568:	80 3e       	cpi	r24, 0xE0	; 224
    156a:	b4 f0       	brlt	.+44     	; 0x1598 <limit_tx_pwr+0x4e>
    156c:	80 32       	cpi	r24, 0x20	; 32
    156e:	b4 f4       	brge	.+44     	; 0x159c <limit_tx_pwr+0x52>
    1570:	88 23       	and	r24, r24
    1572:	cc f4       	brge	.+50     	; 0x15a6 <limit_tx_pwr+0x5c>
    1574:	8f 71       	andi	r24, 0x1F	; 31
    1576:	80 62       	ori	r24, 0x20	; 32
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <limit_tx_pwr+0x5c>
    157a:	e1 e7       	ldi	r30, 0x71	; 113
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	24 91       	lpm	r18, Z
    1580:	92 17       	cp	r25, r18
    1582:	8c f4       	brge	.+34     	; 0x15a6 <limit_tx_pwr+0x5c>
    1584:	84 91       	lpm	r24, Z
    1586:	80 3e       	cpi	r24, 0xE0	; 224
    1588:	5c f0       	brlt	.+22     	; 0x15a0 <limit_tx_pwr+0x56>
    158a:	80 32       	cpi	r24, 0x20	; 32
    158c:	5c f4       	brge	.+22     	; 0x15a4 <limit_tx_pwr+0x5a>
    158e:	88 23       	and	r24, r24
    1590:	54 f4       	brge	.+20     	; 0x15a6 <limit_tx_pwr+0x5c>
    1592:	8f 71       	andi	r24, 0x1F	; 31
    1594:	80 62       	ori	r24, 0x20	; 32
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <limit_tx_pwr+0x5c>
    1598:	80 e2       	ldi	r24, 0x20	; 32
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <limit_tx_pwr+0x5c>
    159c:	8f e1       	ldi	r24, 0x1F	; 31
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <limit_tx_pwr+0x5c>
    15a0:	80 e2       	ldi	r24, 0x20	; 32
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <limit_tx_pwr+0x5c>
    15a4:	8f e1       	ldi	r24, 0x1F	; 31
    15a6:	80 68       	ori	r24, 0x80	; 128
    15a8:	08 95       	ret

000015aa <init_tal_pib>:
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	c7 e5       	ldi	r28, 0x57	; 87
    15b0:	d5 e0       	ldi	r29, 0x05	; 5
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	8c 8b       	std	Y+20, r24	; 0x14
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	8d 8b       	std	Y+21, r24	; 0x15
    15ba:	2f ef       	ldi	r18, 0xFF	; 255
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
    15be:	3f 87       	std	Y+15, r19	; 0x0f
    15c0:	2e 87       	std	Y+14, r18	; 0x0e
    15c2:	3d 87       	std	Y+13, r19	; 0x0d
    15c4:	2c 87       	std	Y+12, r18	; 0x0c
    15c6:	9b e0       	ldi	r25, 0x0B	; 11
    15c8:	9b 8b       	std	Y+19, r25	; 0x13
    15ca:	18 8e       	std	Y+24, r1	; 0x18
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	58 ef       	ldi	r21, 0xF8	; 248
    15d0:	6f ef       	ldi	r22, 0xFF	; 255
    15d2:	77 e0       	ldi	r23, 0x07	; 7
    15d4:	48 87       	std	Y+8, r20	; 0x08
    15d6:	59 87       	std	Y+9, r21	; 0x09
    15d8:	6a 87       	std	Y+10, r22	; 0x0a
    15da:	7b 87       	std	Y+11, r23	; 0x0b
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	31 e0       	ldi	r19, 0x01	; 1
    15e0:	39 8b       	std	Y+17, r19	; 0x11
    15e2:	28 8b       	std	Y+16, r18	; 0x10
    15e4:	9a e0       	ldi	r25, 0x0A	; 10
    15e6:	99 8f       	std	Y+25, r25	; 0x19
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	9a 8f       	std	Y+26, r25	; 0x1a
    15ec:	95 e0       	ldi	r25, 0x05	; 5
    15ee:	9b 8f       	std	Y+27, r25	; 0x1b
    15f0:	8c 8f       	std	Y+28, r24	; 0x1c
    15f2:	84 e8       	ldi	r24, 0x84	; 132
    15f4:	aa df       	rcall	.-172    	; 0x154a <limit_tx_pwr>
    15f6:	8f 8b       	std	Y+23, r24	; 0x17
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8a 8b       	std	Y+18, r24	; 0x12
    15fc:	1e 8a       	std	Y+22, r1	; 0x16
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    1604:	85 fd       	sbrc	r24, 5
    1606:	02 c0       	rjmp	.+4      	; 0x160c <convert_phyTransmitPower_to_reg_value+0x8>
    1608:	8f 73       	andi	r24, 0x3F	; 63
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <convert_phyTransmitPower_to_reg_value+0xe>
    160c:	81 95       	neg	r24
    160e:	8f 71       	andi	r24, 0x1F	; 31
    1610:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    1612:	e2 e6       	ldi	r30, 0x62	; 98
    1614:	f1 e0       	ldi	r31, 0x01	; 1
    1616:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    1618:	89 17       	cp	r24, r25
    161a:	3c f4       	brge	.+14     	; 0x162a <convert_phyTransmitPower_to_reg_value+0x26>
    161c:	e3 e6       	ldi	r30, 0x63	; 99
    161e:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1620:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    1622:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    1624:	89 17       	cp	r24, r25
    1626:	3c f0       	brlt	.+14     	; 0x1636 <convert_phyTransmitPower_to_reg_value+0x32>
    1628:	01 c0       	rjmp	.+2      	; 0x162c <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    162a:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    162c:	98 17       	cp	r25, r24
    162e:	4c f4       	brge	.+18     	; 0x1642 <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	82 0f       	add	r24, r18
    1634:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    1636:	2f 5f       	subi	r18, 0xFF	; 255
    1638:	31 96       	adiw	r30, 0x01	; 1
    163a:	20 31       	cpi	r18, 0x10	; 16
    163c:	91 f7       	brne	.-28     	; 0x1622 <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret
    1642:	82 2f       	mov	r24, r18
}
    1644:	08 95       	ret

00001646 <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    164a:	e7 e5       	ldi	r30, 0x57	; 87
    164c:	f5 e0       	ldi	r31, 0x05	; 5
    164e:	86 85       	ldd	r24, Z+14	; 0x0e
    1650:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    1654:	87 85       	ldd	r24, Z+15	; 0x0f
    1656:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    165a:	e4 e6       	ldi	r30, 0x64	; 100
    165c:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    165e:	a7 e5       	ldi	r26, 0x57	; 87
    1660:	b5 e0       	ldi	r27, 0x05	; 5
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    1662:	8d 91       	ld	r24, X+
    1664:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    1666:	ec 36       	cpi	r30, 0x6C	; 108
    1668:	31 e0       	ldi	r19, 0x01	; 1
    166a:	f3 07       	cpc	r31, r19
    166c:	d1 f7       	brne	.-12     	; 0x1662 <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    166e:	e7 e5       	ldi	r30, 0x57	; 87
    1670:	f5 e0       	ldi	r31, 0x05	; 5
    1672:	84 85       	ldd	r24, Z+12	; 0x0c
    1674:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
	trx_reg_write(RG_SHORT_ADDR_1,
    1678:	85 85       	ldd	r24, Z+13	; 0x0d
    167a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    167e:	48 e4       	ldi	r20, 0x48	; 72
    1680:	51 e0       	ldi	r21, 0x01	; 1
    1682:	da 01       	movw	r26, r20
    1684:	8c 91       	ld	r24, X
    1686:	22 89       	ldd	r18, Z+18	; 0x12
    1688:	b0 e2       	ldi	r27, 0x20	; 32
    168a:	2b 9f       	mul	r18, r27
    168c:	90 01       	movw	r18, r0
    168e:	11 24       	eor	r1, r1
    1690:	20 76       	andi	r18, 0x60	; 96
    1692:	8f 79       	andi	r24, 0x9F	; 159
    1694:	82 2b       	or	r24, r18
    1696:	da 01       	movw	r26, r20
    1698:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    169a:	cf e6       	ldi	r28, 0x6F	; 111
    169c:	d1 e0       	ldi	r29, 0x01	; 1
    169e:	88 81       	ld	r24, Y
    16a0:	95 89       	ldd	r25, Z+21	; 0x15
    16a2:	9f 70       	andi	r25, 0x0F	; 15
    16a4:	80 7f       	andi	r24, 0xF0	; 240
    16a6:	89 2b       	or	r24, r25
    16a8:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    16aa:	2e e6       	ldi	r18, 0x6E	; 110
    16ac:	31 e0       	ldi	r19, 0x01	; 1
    16ae:	d9 01       	movw	r26, r18
    16b0:	8c 91       	ld	r24, X
    16b2:	96 89       	ldd	r25, Z+22	; 0x16
    16b4:	99 0f       	add	r25, r25
    16b6:	99 0f       	add	r25, r25
    16b8:	99 0f       	add	r25, r25
    16ba:	98 70       	andi	r25, 0x08	; 8
    16bc:	87 7f       	andi	r24, 0xF7	; 247
    16be:	89 2b       	or	r24, r25
    16c0:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    16c2:	28 81       	ld	r18, Y
    16c4:	93 8d       	ldd	r25, Z+27	; 0x1b
    16c6:	b0 e1       	ldi	r27, 0x10	; 16
    16c8:	9b 9f       	mul	r25, r27
    16ca:	c0 01       	movw	r24, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	92 2f       	mov	r25, r18
    16d0:	9f 70       	andi	r25, 0x0F	; 15
    16d2:	89 2b       	or	r24, r25
    16d4:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    16d6:	da 01       	movw	r26, r20
    16d8:	8c 91       	ld	r24, X
    16da:	93 89       	ldd	r25, Z+19	; 0x13
    16dc:	9f 71       	andi	r25, 0x1F	; 31
    16de:	80 7e       	andi	r24, 0xE0	; 224
    16e0:	89 2b       	or	r24, r25
    16e2:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    16e4:	87 89       	ldd	r24, Z+23	; 0x17
    16e6:	8e df       	rcall	.-228    	; 0x1604 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    16e8:	e5 e4       	ldi	r30, 0x45	; 69
    16ea:	f1 e0       	ldi	r31, 0x01	; 1
    16ec:	90 81       	ld	r25, Z
    16ee:	90 7f       	andi	r25, 0xF0	; 240
    16f0:	8f 70       	andi	r24, 0x0F	; 15
    16f2:	89 2b       	or	r24, r25
    16f4:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    1700:	8e 34       	cpi	r24, 0x4E	; 78
    1702:	41 f0       	breq	.+16     	; 0x1714 <tal_pib_set+0x18>
    1704:	89 35       	cpi	r24, 0x59	; 89
    1706:	61 f4       	brne	.+24     	; 0x1720 <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    1708:	fb 01       	movw	r30, r22
    170a:	80 81       	ld	r24, Z
    170c:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1710:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    1712:	0b c1       	rjmp	.+534    	; 0x192a <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    1714:	fb 01       	movw	r30, r22
    1716:	80 81       	ld	r24, Z
    1718:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    171c:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    171e:	05 c1       	rjmp	.+522    	; 0x192a <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    1720:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <tal_trx_status>
    1724:	9f 30       	cpi	r25, 0x0F	; 15
    1726:	09 f4       	brne	.+2      	; 0x172a <tal_pib_set+0x2e>
    1728:	dc c0       	rjmp	.+440    	; 0x18e2 <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    172a:	8b 30       	cpi	r24, 0x0B	; 11
    172c:	09 f4       	brne	.+2      	; 0x1730 <tal_pib_set+0x34>
    172e:	c9 c0       	rjmp	.+402    	; 0x18c2 <tal_pib_set+0x1c6>
    1730:	80 f4       	brcc	.+32     	; 0x1752 <tal_pib_set+0x56>
    1732:	eb 01       	movw	r28, r22
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	09 f4       	brne	.+2      	; 0x173a <tal_pib_set+0x3e>
    1738:	84 c0       	rjmp	.+264    	; 0x1842 <tal_pib_set+0x146>
    173a:	20 f4       	brcc	.+8      	; 0x1744 <tal_pib_set+0x48>
    173c:	88 23       	and	r24, r24
    173e:	09 f4       	brne	.+2      	; 0x1742 <tal_pib_set+0x46>
    1740:	46 c0       	rjmp	.+140    	; 0x17ce <tal_pib_set+0xd2>
    1742:	d1 c0       	rjmp	.+418    	; 0x18e6 <tal_pib_set+0x1ea>
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	09 f4       	brne	.+2      	; 0x174a <tal_pib_set+0x4e>
    1748:	8c c0       	rjmp	.+280    	; 0x1862 <tal_pib_set+0x166>
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	09 f4       	brne	.+2      	; 0x1750 <tal_pib_set+0x54>
    174e:	5a c0       	rjmp	.+180    	; 0x1804 <tal_pib_set+0x108>
    1750:	ca c0       	rjmp	.+404    	; 0x18e6 <tal_pib_set+0x1ea>
    1752:	83 35       	cpi	r24, 0x53	; 83
    1754:	79 f1       	breq	.+94     	; 0x17b4 <tal_pib_set+0xb8>
    1756:	28 f4       	brcc	.+10     	; 0x1762 <tal_pib_set+0x66>
    1758:	8f 34       	cpi	r24, 0x4F	; 79
    175a:	51 f0       	breq	.+20     	; 0x1770 <tal_pib_set+0x74>
    175c:	80 35       	cpi	r24, 0x50	; 80
    175e:	e9 f0       	breq	.+58     	; 0x179a <tal_pib_set+0x9e>
    1760:	c2 c0       	rjmp	.+388    	; 0x18e6 <tal_pib_set+0x1ea>
    1762:	87 35       	cpi	r24, 0x57	; 87
    1764:	09 f4       	brne	.+2      	; 0x1768 <tal_pib_set+0x6c>
    1766:	56 c0       	rjmp	.+172    	; 0x1814 <tal_pib_set+0x118>
    1768:	80 3f       	cpi	r24, 0xF0	; 240
    176a:	09 f4       	brne	.+2      	; 0x176e <tal_pib_set+0x72>
    176c:	8b c0       	rjmp	.+278    	; 0x1884 <tal_pib_set+0x188>
    176e:	bb c0       	rjmp	.+374    	; 0x18e6 <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    1770:	fb 01       	movw	r30, r22
    1772:	80 81       	ld	r24, Z
    1774:	e7 e5       	ldi	r30, 0x57	; 87
    1776:	f5 e0       	ldi	r31, 0x05	; 5
    1778:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    177a:	93 8d       	ldd	r25, Z+27	; 0x1b
    177c:	98 17       	cp	r25, r24
    177e:	10 f4       	brcc	.+4      	; 0x1784 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    1780:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    1784:	ef e6       	ldi	r30, 0x6F	; 111
    1786:	f1 e0       	ldi	r31, 0x01	; 1
    1788:	80 81       	ld	r24, Z
    178a:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <tal_pib+0x15>
    178e:	9f 70       	andi	r25, 0x0F	; 15
    1790:	80 7f       	andi	r24, 0xF0	; 240
    1792:	89 2b       	or	r24, r25
    1794:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1796:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    1798:	c8 c0       	rjmp	.+400    	; 0x192a <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    179a:	fb 01       	movw	r30, r22
    179c:	90 81       	ld	r25, Z
    179e:	81 81       	ldd	r24, Z+1	; 0x01
    17a0:	e7 e5       	ldi	r30, 0x57	; 87
    17a2:	f5 e0       	ldi	r31, 0x05	; 5
    17a4:	96 87       	std	Z+14, r25	; 0x0e
    17a6:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    17a8:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
			trx_reg_write(RG_PAN_ID_1,
    17ac:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    17b0:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    17b2:	bb c0       	rjmp	.+374    	; 0x192a <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    17b4:	fb 01       	movw	r30, r22
    17b6:	90 81       	ld	r25, Z
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	e7 e5       	ldi	r30, 0x57	; 87
    17bc:	f5 e0       	ldi	r31, 0x05	; 5
    17be:	94 87       	std	Z+12, r25	; 0x0c
    17c0:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    17c2:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    17c6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    17cc:	ae c0       	rjmp	.+348    	; 0x192a <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    17ce:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <tal_state>
    17d2:	81 11       	cpse	r24, r1
    17d4:	8a c0       	rjmp	.+276    	; 0x18ea <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    17d6:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	58 ef       	ldi	r21, 0xF8	; 248
    17dc:	6f ef       	ldi	r22, 0xFF	; 255
    17de:	77 e0       	ldi	r23, 0x07	; 7
    17e0:	08 2e       	mov	r0, r24
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <tal_pib_set+0xf0>
    17e4:	76 95       	lsr	r23
    17e6:	67 95       	ror	r22
    17e8:	57 95       	ror	r21
    17ea:	47 95       	ror	r20
    17ec:	0a 94       	dec	r0
    17ee:	d2 f7       	brpl	.-12     	; 0x17e4 <tal_pib_set+0xe8>
    17f0:	40 ff       	sbrs	r20, 0
    17f2:	7d c0       	rjmp	.+250    	; 0x18ee <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    17f4:	98 30       	cpi	r25, 0x08	; 8
    17f6:	09 f4       	brne	.+2      	; 0x17fa <tal_pib_set+0xfe>
    17f8:	80 c0       	rjmp	.+256    	; 0x18fa <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	6d da       	rcall	.-2854   	; 0xcd8 <set_trx_state>
							TRX_OFF);
    17fe:	88 30       	cpi	r24, 0x08	; 8
    1800:	e1 f7       	brne	.-8      	; 0x17fa <tal_pib_set+0xfe>
    1802:	86 c0       	rjmp	.+268    	; 0x1910 <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    1804:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <tal_state>
    1808:	81 11       	cpse	r24, r1
    180a:	73 c0       	rjmp	.+230    	; 0x18f2 <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    180c:	88 81       	ld	r24, Y
    180e:	81 11       	cpse	r24, r1
    1810:	72 c0       	rjmp	.+228    	; 0x18f6 <tal_pib_set+0x1fa>
    1812:	8b c0       	rjmp	.+278    	; 0x192a <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    1814:	fb 01       	movw	r30, r22
    1816:	90 81       	ld	r25, Z
    1818:	e7 e5       	ldi	r30, 0x57	; 87
    181a:	f5 e0       	ldi	r31, 0x05	; 5
    181c:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    181e:	85 89       	ldd	r24, Z+21	; 0x15
    1820:	98 17       	cp	r25, r24
    1822:	10 f4       	brcc	.+4      	; 0x1828 <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    1824:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    1828:	ef e6       	ldi	r30, 0x6F	; 111
    182a:	f1 e0       	ldi	r31, 0x01	; 1
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	2f 70       	andi	r18, 0x0F	; 15
    1832:	30 e1       	ldi	r19, 0x10	; 16
    1834:	93 9f       	mul	r25, r19
    1836:	c0 01       	movw	r24, r0
    1838:	11 24       	eor	r1, r1
    183a:	82 2b       	or	r24, r18
    183c:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    183e:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    1840:	74 c0       	rjmp	.+232    	; 0x192a <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    1842:	88 81       	ld	r24, Y
    1844:	c7 e5       	ldi	r28, 0x57	; 87
    1846:	d5 e0       	ldi	r29, 0x05	; 5

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    1848:	8f 8b       	std	Y+23, r24	; 0x17
    184a:	7f de       	rcall	.-770    	; 0x154a <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    184c:	8f 8b       	std	Y+23, r24	; 0x17
    184e:	da de       	rcall	.-588    	; 0x1604 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    1850:	e5 e4       	ldi	r30, 0x45	; 69
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	90 81       	ld	r25, Z
    1856:	90 7f       	andi	r25, 0xF0	; 240
    1858:	8f 70       	andi	r24, 0x0F	; 15
    185a:	89 2b       	or	r24, r25
    185c:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    185e:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    1860:	64 c0       	rjmp	.+200    	; 0x192a <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    1862:	88 81       	ld	r24, Y
    1864:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    1868:	e8 e4       	ldi	r30, 0x48	; 72
    186a:	f1 e0       	ldi	r31, 0x01	; 1
    186c:	20 81       	ld	r18, Z
    186e:	30 e2       	ldi	r19, 0x20	; 32
    1870:	83 9f       	mul	r24, r19
    1872:	c0 01       	movw	r24, r0
    1874:	11 24       	eor	r1, r1
    1876:	80 76       	andi	r24, 0x60	; 96
    1878:	92 2f       	mov	r25, r18
    187a:	9f 79       	andi	r25, 0x9F	; 159
    187c:	89 2b       	or	r24, r25
    187e:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1880:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    1882:	53 c0       	rjmp	.+166    	; 0x192a <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    1884:	fb 01       	movw	r30, r22
    1886:	b0 81       	ld	r27, Z
    1888:	a1 81       	ldd	r26, Z+1	; 0x01
    188a:	52 81       	ldd	r21, Z+2	; 0x02
    188c:	43 81       	ldd	r20, Z+3	; 0x03
    188e:	34 81       	ldd	r19, Z+4	; 0x04
    1890:	25 81       	ldd	r18, Z+5	; 0x05
    1892:	96 81       	ldd	r25, Z+6	; 0x06
    1894:	87 81       	ldd	r24, Z+7	; 0x07
    1896:	e7 e5       	ldi	r30, 0x57	; 87
    1898:	f5 e0       	ldi	r31, 0x05	; 5
    189a:	b0 83       	st	Z, r27
    189c:	a1 83       	std	Z+1, r26	; 0x01
    189e:	52 83       	std	Z+2, r21	; 0x02
    18a0:	43 83       	std	Z+3, r20	; 0x03
    18a2:	34 83       	std	Z+4, r19	; 0x04
    18a4:	25 83       	std	Z+5, r18	; 0x05
    18a6:	96 83       	std	Z+6, r25	; 0x06
    18a8:	87 83       	std	Z+7, r24	; 0x07
    18aa:	e4 e6       	ldi	r30, 0x64	; 100
    18ac:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    18ae:	a7 e5       	ldi	r26, 0x57	; 87
    18b0:	b5 e0       	ldi	r27, 0x05	; 5

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    18b2:	8d 91       	ld	r24, X+
    18b4:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    18b6:	ec 36       	cpi	r30, 0x6C	; 108
    18b8:	31 e0       	ldi	r19, 0x01	; 1
    18ba:	f3 07       	cpc	r31, r19
    18bc:	d1 f7       	brne	.-12     	; 0x18b2 <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	34 c0       	rjmp	.+104    	; 0x192a <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    18c2:	fb 01       	movw	r30, r22
    18c4:	80 81       	ld	r24, Z
    18c6:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    18ca:	ee e6       	ldi	r30, 0x6E	; 110
    18cc:	f1 e0       	ldi	r31, 0x01	; 1
    18ce:	90 81       	ld	r25, Z
    18d0:	88 0f       	add	r24, r24
    18d2:	88 0f       	add	r24, r24
    18d4:	88 0f       	add	r24, r24
    18d6:	88 70       	andi	r24, 0x08	; 8
    18d8:	97 7f       	andi	r25, 0xF7	; 247
    18da:	89 2b       	or	r24, r25
    18dc:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    18de:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    18e0:	24 c0       	rjmp	.+72     	; 0x192a <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    18e2:	81 e8       	ldi	r24, 0x81	; 129
    18e4:	22 c0       	rjmp	.+68     	; 0x192a <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    18e6:	84 ef       	ldi	r24, 0xF4	; 244
    18e8:	20 c0       	rjmp	.+64     	; 0x192a <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    18ea:	86 e8       	ldi	r24, 0x86	; 134
    18ec:	1e c0       	rjmp	.+60     	; 0x192a <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    18ee:	88 ee       	ldi	r24, 0xE8	; 232
    18f0:	1c c0       	rjmp	.+56     	; 0x192a <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    18f2:	86 e8       	ldi	r24, 0x86	; 134
    18f4:	1a c0       	rjmp	.+52     	; 0x192a <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    18f6:	88 ee       	ldi	r24, 0xE8	; 232
    18f8:	18 c0       	rjmp	.+48     	; 0x192a <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    18fa:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    18fe:	e8 e4       	ldi	r30, 0x48	; 72
    1900:	f1 e0       	ldi	r31, 0x01	; 1
    1902:	90 81       	ld	r25, Z
    1904:	90 7e       	andi	r25, 0xE0	; 224
    1906:	8f 71       	andi	r24, 0x1F	; 31
    1908:	89 2b       	or	r24, r25
    190a:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	0d c0       	rjmp	.+26     	; 0x192a <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    1910:	88 81       	ld	r24, Y
    1912:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    1916:	e8 e4       	ldi	r30, 0x48	; 72
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	90 81       	ld	r25, Z
    191c:	90 7e       	andi	r25, 0xE0	; 224
    191e:	8f 71       	andi	r24, 0x1F	; 31
    1920:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    1922:	80 83       	st	Z, r24
    1924:	86 e1       	ldi	r24, 0x16	; 22
    1926:	d8 d9       	rcall	.-3152   	; 0xcd8 <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    1928:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1930:	04 c0       	rjmp	.+8      	; 0x193a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1932:	61 50       	subi	r22, 0x01	; 1
    1934:	71 09       	sbc	r23, r1
    1936:	81 09       	sbc	r24, r1
    1938:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    193a:	61 15       	cp	r22, r1
    193c:	71 05       	cpc	r23, r1
    193e:	81 05       	cpc	r24, r1
    1940:	91 05       	cpc	r25, r1
    1942:	b9 f7       	brne	.-18     	; 0x1932 <__portable_avr_delay_cycles+0x2>
    1944:	08 95       	ret

00001946 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    1956:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <tal_rx_buffer>
    195a:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <tal_rx_buffer+0x1>
    195e:	30 97       	sbiw	r30, 0x00	; 0
    1960:	71 f4       	brne	.+28     	; 0x197e <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    1962:	cc e4       	ldi	r28, 0x4C	; 76
    1964:	d1 e0       	ldi	r29, 0x01	; 1
    1966:	88 81       	ld	r24, Y
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	dd df       	rcall	.-70     	; 0x1930 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1976:	88 81       	ld	r24, Y
    1978:	80 68       	ori	r24, 0x80	; 128
    197a:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    197c:	48 c0       	rjmp	.+144    	; 0x1a0e <handle_received_frame_irq+0xc8>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    197e:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    1982:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    1986:	11 23       	and	r17, r17
    1988:	0c f4       	brge	.+2      	; 0x198c <handle_received_frame_irq+0x46>
    198a:	41 c0       	rjmp	.+130    	; 0x1a0e <handle_received_frame_irq+0xc8>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    198c:	e0 80       	ld	r14, Z
    198e:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	81 0f       	add	r24, r17
    1994:	eb e8       	ldi	r30, 0x8B	; 139
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	e8 1b       	sub	r30, r24
    199a:	f1 09       	sbc	r31, r1
    199c:	e7 01       	movw	r28, r14
    199e:	ce 0f       	add	r28, r30
    19a0:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    19a2:	c1 2e       	mov	r12, r17
    19a4:	d1 2c       	mov	r13, r1
    19a6:	a6 01       	movw	r20, r12
    19a8:	4f 5f       	subi	r20, 0xFF	; 255
    19aa:	5f 4f       	sbci	r21, 0xFF	; 255
    19ac:	60 e8       	ldi	r22, 0x80	; 128
    19ae:	71 e0       	ldi	r23, 0x01	; 1
    19b0:	ce 01       	movw	r24, r28
    19b2:	70 d7       	rcall	.+3808   	; 0x2894 <memcpy>
	frame_ptr--;
    19b4:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    19b6:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    19b8:	d7 01       	movw	r26, r14
    19ba:	18 96       	adiw	r26, 0x08	; 8
    19bc:	fc 93       	st	X, r31
    19be:	ee 93       	st	-X, r30
    19c0:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    19c2:	ec 0d       	add	r30, r12
    19c4:	fd 1d       	adc	r31, r13
    19c6:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    19c8:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <tal_rx_buffer>
    19cc:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <tal_rx_buffer+0x1>
    19d0:	80 e5       	ldi	r24, 0x50	; 80
    19d2:	95 e0       	ldi	r25, 0x05	; 5

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    19d4:	2d d9       	rcall	.-3494   	; 0xc30 <qmm_queue_append>
    19d6:	8b e8       	ldi	r24, 0x8B	; 139
    19d8:	93 d8       	rcall	.-3802   	; 0xb00 <bmm_buffer_alloc>
    19da:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <tal_rx_buffer+0x1>
    19de:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <tal_rx_buffer>

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    19e2:	89 2b       	or	r24, r25
    19e4:	21 f4       	brne	.+8      	; 0x19ee <handle_received_frame_irq+0xa8>
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <tal_rx_on_required>
    19ec:	0d c0       	rjmp	.+26     	; 0x1a08 <handle_received_frame_irq+0xc2>
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    19ee:	cc e4       	ldi	r28, 0x4C	; 76
    19f0:	d1 e0       	ldi	r29, 0x01	; 1
    19f2:	88 81       	ld	r24, Y
    19f4:	8f 77       	andi	r24, 0x7F	; 127
    19f6:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    19f8:	63 e0       	ldi	r22, 0x03	; 3
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	97 df       	rcall	.-210    	; 0x1930 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1a02:	88 81       	ld	r24, Y
    1a04:	80 68       	ori	r24, 0x80	; 128
    1a06:	88 83       	st	Y, r24
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    1a08:	80 e4       	ldi	r24, 0x40	; 64
    1a0a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	08 95       	ret

00001a20 <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    1a26:	fc 01       	movw	r30, r24
    1a28:	c0 81       	ld	r28, Z
    1a2a:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    1a2c:	af 81       	ldd	r26, Y+7	; 0x07
    1a2e:	b8 85       	ldd	r27, Y+8	; 0x08
    1a30:	8c 91       	ld	r24, X
    1a32:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    1a36:	e8 2f       	mov	r30, r24
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	31 96       	adiw	r30, 0x01	; 1
    1a3c:	ea 0f       	add	r30, r26
    1a3e:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    1a40:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    1a42:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    1a44:	3d 33       	cpi	r19, 0x3D	; 61
    1a46:	20 f4       	brcc	.+8      	; 0x1a50 <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    1a48:	31 11       	cpse	r19, r1
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <process_incoming_frame+0x32>
		ed_value = 1;
    1a4c:	31 e0       	ldi	r19, 0x01	; 1
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    1a50:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    1a52:	82 95       	swap	r24
    1a54:	86 95       	lsr	r24
    1a56:	86 95       	lsr	r24
    1a58:	83 70       	andi	r24, 0x03	; 3
    1a5a:	2f ef       	ldi	r18, 0xFF	; 255
    1a5c:	82 9f       	mul	r24, r18
    1a5e:	c0 01       	movw	r24, r0
    1a60:	11 24       	eor	r1, r1
    1a62:	38 9f       	mul	r19, r24
    1a64:	b0 01       	movw	r22, r0
    1a66:	39 9f       	mul	r19, r25
    1a68:	70 0d       	add	r23, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	a3 e8       	ldi	r26, 0x83	; 131
    1a70:	bd e2       	ldi	r27, 0x2D	; 45
    1a72:	8a d6       	rcall	.+3348   	; 0x2788 <__umulhisi3>
    1a74:	96 95       	lsr	r25
    1a76:	87 95       	ror	r24
    1a78:	92 95       	swap	r25
    1a7a:	82 95       	swap	r24
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	89 27       	eor	r24, r25
    1a80:	9f 70       	andi	r25, 0x0F	; 15
    1a82:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    1a84:	8f 3f       	cpi	r24, 0xFF	; 255
    1a86:	91 05       	cpc	r25, r1
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <process_incoming_frame+0x6e>
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <process_incoming_frame+0x6e>
		return 255;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    1a8e:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    1a90:	5a 83       	std	Y+2, r21	; 0x02
    1a92:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    1a94:	ce 01       	movw	r24, r28
    1a96:	2e d6       	rcall	.+3164   	; 0x26f4 <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    1a9e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <tal_state>
    1aa2:	91 11       	cpse	r25, r1
    1aa4:	16 c0       	rjmp	.+44     	; 0x1ad2 <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    1aaa:	16 d9       	rcall	.-3540   	; 0xcd8 <set_trx_state>
		tal_rx_on_required = false;
    1aac:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <tal_rx_on_required>
		return TRX_OFF;
    1ab0:	88 e0       	ldi	r24, 0x08	; 8
    1ab2:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    1ab4:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <tal_rx_buffer>
    1ab8:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <tal_rx_buffer+0x1>
    1abc:	89 2b       	or	r24, r25
    1abe:	21 f0       	breq	.+8      	; 0x1ac8 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1ac0:	86 e1       	ldi	r24, 0x16	; 22
    1ac2:	0a d9       	rcall	.-3564   	; 0xcd8 <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    1ac4:	86 e0       	ldi	r24, 0x06	; 6
    1ac6:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    1ace:	86 e0       	ldi	r24, 0x06	; 6
    1ad0:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    1ad2:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    1ad4:	08 95       	ret

00001ad6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1ad8:	61 50       	subi	r22, 0x01	; 1
    1ada:	71 09       	sbc	r23, r1
    1adc:	81 09       	sbc	r24, r1
    1ade:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1ae0:	61 15       	cp	r22, r1
    1ae2:	71 05       	cpc	r23, r1
    1ae4:	81 05       	cpc	r24, r1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	b9 f7       	brne	.-18     	; 0x1ad8 <__portable_avr_delay_cycles+0x2>
    1aea:	08 95       	ret

00001aec <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    1aec:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    1af0:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <trx_trac_status>
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	69 f0       	breq	.+26     	; 0x1b12 <tx_done_handling+0x26>
    1af8:	28 f4       	brcc	.+10     	; 0x1b04 <tx_done_handling+0x18>
    1afa:	88 23       	and	r24, r24
    1afc:	91 f0       	breq	.+36     	; 0x1b22 <tx_done_handling+0x36>
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	31 f0       	breq	.+12     	; 0x1b0e <tx_done_handling+0x22>
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <tx_done_handling+0x32>
    1b04:	85 30       	cpi	r24, 0x05	; 5
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <tx_done_handling+0x2a>
    1b08:	87 30       	cpi	r24, 0x07	; 7
    1b0a:	39 f0       	breq	.+14     	; 0x1b1a <tx_done_handling+0x2e>
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    1b0e:	87 e8       	ldi	r24, 0x87	; 135
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    1b12:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    1b16:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    1b1a:	85 e8       	ldi	r24, 0x85	; 133
		break;
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    1b1e:	85 e8       	ldi	r24, 0x85	; 133
		break;
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    1b22:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    1b24:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <mac_frame_ptr>
    1b28:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <mac_frame_ptr+0x1>
    1b2c:	e0 c5       	rjmp	.+3008   	; 0x26ee <tal_tx_frame_done_cb>
    1b2e:	08 95       	ret

00001b30 <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	1f 92       	push	r1
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    1b3e:	66 23       	and	r22, r22
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    1b42:	ec e6       	ldi	r30, 0x6C	; 108
    1b44:	f1 e0       	ldi	r31, 0x01	; 1
    1b46:	20 81       	ld	r18, Z
    1b48:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <tal_pib+0x1c>
    1b4c:	30 e1       	ldi	r19, 0x10	; 16
    1b4e:	93 9f       	mul	r25, r19
    1b50:	c0 01       	movw	r24, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	92 2f       	mov	r25, r18
    1b56:	9f 70       	andi	r25, 0x0F	; 15
    1b58:	89 2b       	or	r24, r25
    1b5a:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    1b5c:	12 30       	cpi	r17, 0x02	; 2
    1b5e:	e0 f4       	brcc	.+56     	; 0x1b98 <send_frame+0x68>
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    1b62:	ec e6       	ldi	r30, 0x6C	; 108
    1b64:	f1 e0       	ldi	r31, 0x01	; 1
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 70       	andi	r24, 0x0F	; 15
    1b6a:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    1b6c:	12 30       	cpi	r17, 0x02	; 2
    1b6e:	a0 f4       	brcc	.+40     	; 0x1b98 <send_frame+0x68>
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    1b72:	ec e6       	ldi	r30, 0x6C	; 108
    1b74:	f1 e0       	ldi	r31, 0x01	; 1
    1b76:	80 81       	ld	r24, Z
    1b78:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <tal_pib+0x14>
    1b7c:	99 0f       	add	r25, r25
    1b7e:	9e 70       	andi	r25, 0x0E	; 14
    1b80:	81 7f       	andi	r24, 0xF1	; 241
    1b82:	89 2b       	or	r24, r25
    1b84:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    1b86:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x70016f>
    1b8a:	1a c0       	rjmp	.+52     	; 0x1bc0 <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    1b8c:	ec e6       	ldi	r30, 0x6C	; 108
    1b8e:	f1 e0       	ldi	r31, 0x01	; 1
    1b90:	80 81       	ld	r24, Z
    1b92:	8e 60       	ori	r24, 0x0E	; 14
    1b94:	80 83       	st	Z, r24
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    1b98:	e7 e5       	ldi	r30, 0x57	; 87
    1b9a:	f5 e0       	ldi	r31, 0x05	; 5
    1b9c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b9e:	20 e1       	ldi	r18, 0x10	; 16
    1ba0:	82 9f       	mul	r24, r18
    1ba2:	c0 01       	movw	r24, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	95 89       	ldd	r25, Z+21	; 0x15
    1ba8:	89 2b       	or	r24, r25
    1baa:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x70016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    1bae:	ac e6       	ldi	r26, 0x6C	; 108
    1bb0:	b1 e0       	ldi	r27, 0x01	; 1
    1bb2:	8c 91       	ld	r24, X
    1bb4:	94 89       	ldd	r25, Z+20	; 0x14
    1bb6:	99 0f       	add	r25, r25
    1bb8:	9e 70       	andi	r25, 0x0E	; 14
    1bba:	81 7f       	andi	r24, 0xF1	; 241
    1bbc:	89 2b       	or	r24, r25
    1bbe:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    1bc0:	89 e1       	ldi	r24, 0x19	; 25
    1bc2:	8a d8       	rcall	.-3820   	; 0xcd8 <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    1bc4:	89 31       	cpi	r24, 0x19	; 25
    1bc6:	e1 f7       	brne	.-8      	; 0x1bc0 <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    1bc8:	11 30       	cpi	r17, 0x01	; 1
    1bca:	a1 f4       	brne	.+40     	; 0x1bf4 <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    1bcc:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <last_frame_length>
    1bd0:	83 31       	cpi	r24, 0x13	; 19
    1bd2:	40 f0       	brcs	.+16     	; 0x1be4 <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	73 e0       	ldi	r23, 0x03	; 3
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	7c df       	rcall	.-264    	; 0x1ad6 <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    1bde:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <last_frame_length>
    1be2:	0d c0       	rjmp	.+26     	; 0x1bfe <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    1be4:	6b ea       	ldi	r22, 0xAB	; 171
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	74 df       	rcall	.-280    	; 0x1ad6 <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    1bee:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <last_frame_length>
    1bf2:	05 c0       	rjmp	.+10     	; 0x1bfe <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    1bf4:	6c e0       	ldi	r22, 0x0C	; 12
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	6c df       	rcall	.-296    	; 0x1ad6 <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1bfe:	8f b7       	in	r24, 0x3f	; 63
    1c00:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1c02:	f8 94       	cli
	return flags;
    1c04:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    1c06:	e9 e3       	ldi	r30, 0x39	; 57
    1c08:	f1 e0       	ldi	r31, 0x01	; 1
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    1c10:	00 00       	nop
    1c12:	00 00       	nop
	TRX_SLP_TR_LOW();
    1c14:	80 81       	ld	r24, Z
    1c16:	8d 7f       	andi	r24, 0xFD	; 253
    1c18:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    1c1a:	60 91 78 05 	lds	r22, 0x0578	; 0x800578 <tal_frame_to_tx>
    1c1e:	70 91 79 05 	lds	r23, 0x0579	; 0x800579 <tal_frame_to_tx+0x1>
    1c22:	fb 01       	movw	r30, r22
    1c24:	40 81       	ld	r20, Z
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	41 50       	subi	r20, 0x01	; 1
    1c2a:	51 09       	sbc	r21, r1
    1c2c:	80 e8       	ldi	r24, 0x80	; 128
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	31 d6       	rcall	.+3170   	; 0x2894 <memcpy>

	tal_state = TAL_TX_AUTO;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c38:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    1c3a:	0f 90       	pop	r0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	08 95       	ret

00001c44 <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    1c44:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    1c46:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <tal_state>
    1c4a:	91 11       	cpse	r25, r1
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    1c4e:	f0 93 56 05 	sts	0x0556, r31	; 0x800556 <mac_frame_ptr+0x1>
    1c52:	e0 93 55 05 	sts	0x0555, r30	; 0x800555 <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    1c56:	07 80       	ldd	r0, Z+7	; 0x07
    1c58:	f0 85       	ldd	r31, Z+8	; 0x08
    1c5a:	e0 2d       	mov	r30, r0
    1c5c:	f0 93 79 05 	sts	0x0579, r31	; 0x800579 <tal_frame_to_tx+0x1>
    1c60:	e0 93 78 05 	sts	0x0578, r30	; 0x800578 <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    1c64:	80 81       	ld	r24, Z
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    1c6c:	ef 2b       	or	r30, r31
    1c6e:	39 f0       	breq	.+14     	; 0x1c7e <tal_tx_frame+0x3a>
    1c70:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    1c72:	64 2f       	mov	r22, r20
    1c74:	5d df       	rcall	.-326    	; 0x1b30 <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    1c7a:	86 e8       	ldi	r24, 0x86	; 134
    1c7c:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    1c7e:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    1c80:	08 95       	ret

00001c82 <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    1c82:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <tal_state>
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	c1 f4       	brne	.+48     	; 0x1cba <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    1c8a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1c8e:	82 95       	swap	r24
    1c90:	86 95       	lsr	r24
    1c92:	87 70       	andi	r24, 0x07	; 7
    1c94:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    1c9e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <tal_rx_buffer>
    1ca2:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <tal_rx_buffer+0x1>
    1ca6:	89 2b       	or	r24, r25
    1ca8:	31 f4       	brne	.+12     	; 0x1cb6 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    1caa:	89 e0       	ldi	r24, 0x09	; 9
    1cac:	15 d8       	rcall	.-4054   	; 0xcd8 <set_trx_state>
		tal_rx_on_required = true;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <tal_rx_on_required>
    1cb4:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    1cb6:	86 e1       	ldi	r24, 0x16	; 22
    1cb8:	0f c8       	rjmp	.-4066   	; 0xcd8 <set_trx_state>
    1cba:	08 95       	ret

00001cbc <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    1cbc:	88 23       	and	r24, r24
    1cbe:	29 f1       	breq	.+74     	; 0x1d0a <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    1cc0:	ed e4       	ldi	r30, 0x4D	; 77
    1cc2:	f1 e0       	ldi	r31, 0x01	; 1
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8c 7f       	andi	r24, 0xFC	; 252
    1cc8:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 60       	ori	r24, 0x08	; 8
    1cce:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    1cd0:	aa e4       	ldi	r26, 0x4A	; 74
    1cd2:	b1 e0       	ldi	r27, 0x01	; 1
    1cd4:	8c 91       	ld	r24, X
    1cd6:	80 7f       	andi	r24, 0xF0	; 240
    1cd8:	83 60       	ori	r24, 0x03	; 3
    1cda:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1cdc:	80 81       	ld	r24, Z
    1cde:	84 60       	ori	r24, 0x04	; 4
    1ce0:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    1ce2:	80 81       	ld	r24, Z
    1ce4:	83 70       	andi	r24, 0x03	; 3
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <tal_ant_div_config+0x2e>
    1ce8:	54 c0       	rjmp	.+168    	; 0x1d92 <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    1cea:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    1cee:	83 ff       	sbrs	r24, 3
    1cf0:	52 c0       	rjmp	.+164    	; 0x1d96 <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    1cf2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    1cf6:	82 ff       	sbrs	r24, 2
    1cf8:	50 c0       	rjmp	.+160    	; 0x1d9a <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    1cfa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1cfe:	8f 70       	andi	r24, 0x0F	; 15
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <tal_ant_div_config+0x4a>
    1d04:	4c c0       	rjmp	.+152    	; 0x1d9e <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    1d0a:	ed e4       	ldi	r30, 0x4D	; 77
    1d0c:	f1 e0       	ldi	r31, 0x01	; 1
    1d0e:	80 81       	ld	r24, Z
    1d10:	87 7f       	andi	r24, 0xF7	; 247
    1d12:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    1d14:	aa e4       	ldi	r26, 0x4A	; 74
    1d16:	b1 e0       	ldi	r27, 0x01	; 1
    1d18:	8c 91       	ld	r24, X
    1d1a:	80 7f       	andi	r24, 0xF0	; 240
    1d1c:	87 60       	ori	r24, 0x07	; 7
    1d1e:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1d20:	80 81       	ld	r24, Z
    1d22:	84 60       	ori	r24, 0x04	; 4
    1d24:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    1d26:	61 30       	cpi	r22, 0x01	; 1
    1d28:	31 f4       	brne	.+12     	; 0x1d36 <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8c 7f       	andi	r24, 0xFC	; 252
    1d2e:	81 60       	ori	r24, 0x01	; 1
    1d30:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1d32:	85 e8       	ldi	r24, 0x85	; 133
    1d34:	17 c0       	rjmp	.+46     	; 0x1d64 <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    1d36:	62 30       	cpi	r22, 0x02	; 2
    1d38:	41 f4       	brne	.+16     	; 0x1d4a <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    1d3a:	ed e4       	ldi	r30, 0x4D	; 77
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
    1d3e:	80 81       	ld	r24, Z
    1d40:	8c 7f       	andi	r24, 0xFC	; 252
    1d42:	82 60       	ori	r24, 0x02	; 2
    1d44:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1d46:	85 e8       	ldi	r24, 0x85	; 133
    1d48:	0d c0       	rjmp	.+26     	; 0x1d64 <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    1d4a:	66 23       	and	r22, r22
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <tal_ant_div_config+0x96>
    1d4e:	63 30       	cpi	r22, 0x03	; 3
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    1d52:	ed e4       	ldi	r30, 0x4D	; 77
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	80 81       	ld	r24, Z
    1d58:	8c 7f       	andi	r24, 0xFC	; 252
    1d5a:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1d5c:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    1d62:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    1d64:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1d68:	23 70       	andi	r18, 0x03	; 3
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	26 17       	cp	r18, r22
    1d70:	37 07       	cpc	r19, r23
    1d72:	b9 f4       	brne	.+46     	; 0x1da2 <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    1d74:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    1d78:	93 fd       	sbrc	r25, 3
    1d7a:	15 c0       	rjmp	.+42     	; 0x1da6 <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    1d7c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    1d80:	92 fd       	sbrc	r25, 2
    1d82:	13 c0       	rjmp	.+38     	; 0x1daa <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    1d84:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1d88:	9f 70       	andi	r25, 0x0F	; 15
    1d8a:	93 30       	cpi	r25, 0x03	; 3
    1d8c:	79 f4       	brne	.+30     	; 0x1dac <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    1d92:	85 e8       	ldi	r24, 0x85	; 133
    1d94:	08 95       	ret
    1d96:	85 e8       	ldi	r24, 0x85	; 133
    1d98:	08 95       	ret
    1d9a:	85 e8       	ldi	r24, 0x85	; 133
    1d9c:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    1d9e:	85 e8       	ldi	r24, 0x85	; 133
    1da0:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    1da2:	85 e8       	ldi	r24, 0x85	; 133
    1da4:	08 95       	ret
    1da6:	85 e8       	ldi	r24, 0x85	; 133
    1da8:	08 95       	ret
    1daa:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    1dac:	08 95       	ret

00001dae <tfa_pib_set>:
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
	switch (tfa_pib_attribute) {
    1dae:	81 11       	cpse	r24, r1
    1db0:	24 c0       	rjmp	.+72     	; 0x1dfa <tfa_pib_set+0x4c>
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    1db2:	fb 01       	movw	r30, r22
    1db4:	80 81       	ld	r24, Z
		if (tfa_pib_rx_sens > -49) {
    1db6:	80 3d       	cpi	r24, 0xD0	; 208
    1db8:	2c f0       	brlt	.+10     	; 0x1dc4 <tfa_pib_set+0x16>
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
    1dba:	8f ec       	ldi	r24, 0xCF	; 207
    1dbc:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <tfa_pib_rx_sens>
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
    1dc0:	6f e0       	ldi	r22, 0x0F	; 15
    1dc2:	12 c0       	rjmp	.+36     	; 0x1de8 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    1dc4:	87 3a       	cpi	r24, 0xA7	; 167
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <tfa_pib_set+0x24>
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    1dc8:	86 ea       	ldi	r24, 0xA6	; 166
    1dca:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <tfa_pib_rx_sens>
		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	0b c0       	rjmp	.+22     	; 0x1de8 <tfa_pib_set+0x3a>
	switch (tfa_pib_attribute) {
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    1dd2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <tfa_pib_rx_sens>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
		} else {
			reg_val
				= ((tfa_pib_rx_sens -
    1dd6:	08 2e       	mov	r0, r24
    1dd8:	00 0c       	add	r0, r0
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	86 5a       	subi	r24, 0xA6	; 166
    1dde:	9f 4f       	sbci	r25, 0xFF	; 255
    1de0:	63 e0       	ldi	r22, 0x03	; 3
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	b6 d4       	rcall	.+2412   	; 0x2752 <__divmodhi4>
    1de6:	6f 5f       	subi	r22, 0xFF	; 255
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
		}

		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    1de8:	e5 e5       	ldi	r30, 0x55	; 85
    1dea:	f1 e0       	ldi	r31, 0x01	; 1
    1dec:	80 81       	ld	r24, Z
    1dee:	80 7f       	andi	r24, 0xF0	; 240
    1df0:	6f 70       	andi	r22, 0x0F	; 15
    1df2:	68 2b       	or	r22, r24
    1df4:	60 83       	st	Z, r22
	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	08 95       	ret
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    1dfa:	84 ef       	ldi	r24, 0xF4	; 244
	}

	return MAC_SUCCESS;
}
    1dfc:	08 95       	ret

00001dfe <tfa_init>:
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    1dfe:	86 ea       	ldi	r24, 0xA6	; 166
    1e00:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <tfa_pib_rx_sens>
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    1e04:	62 e7       	ldi	r22, 0x72	; 114
    1e06:	74 e0       	ldi	r23, 0x04	; 4
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	d1 df       	rcall	.-94     	; 0x1dae <tfa_pib_set>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    1e14:	60 e1       	ldi	r22, 0x10	; 16
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
{
	init_tfa_pib();
	write_all_tfa_pibs_to_trx();
	sysclk_enable_peripheral_clock(&ADC);
	return MAC_SUCCESS;
}
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	08 95       	ret

00001e20 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    1e20:	0c 94 9a 01 	jmp	0x334	; 0x334 <tmr_ovf_callback>
    1e24:	08 95       	ret

00001e26 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    1e26:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <tmr_cca_callback>
    1e2a:	08 95       	ret

00001e2c <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    1e2c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1e30:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    1e34:	08 95       	ret

00001e36 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1e36:	ef e6       	ldi	r30, 0x6F	; 111
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8d 7f       	andi	r24, 0xFD	; 253
    1e3e:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    1e40:	b1 9a       	sbi	0x16, 1	; 22
    1e42:	08 95       	ret

00001e44 <tmr_enable_cc_interrupt>:
    1e44:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    1e46:	ef e6       	ldi	r30, 0x6F	; 111
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	82 60       	ori	r24, 0x02	; 2
    1e4e:	80 83       	st	Z, r24
    1e50:	08 95       	ret

00001e52 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1e52:	ef e6       	ldi	r30, 0x6F	; 111
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	81 60       	ori	r24, 0x01	; 1
    1e5a:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    1e5c:	b0 9a       	sbi	0x16, 0	; 22
    1e5e:	08 95       	ret

00001e60 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    1e60:	80 e8       	ldi	r24, 0x80	; 128
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	82 c3       	rjmp	.+1796   	; 0x256a <tc_disable>
    1e66:	08 95       	ret

00001e68 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    1e68:	e9 e8       	ldi	r30, 0x89	; 137
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	20 81       	ld	r18, Z
    1e6e:	92 2b       	or	r25, r18
    1e70:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    1e72:	e8 e8       	ldi	r30, 0x88	; 136
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	90 81       	ld	r25, Z
    1e78:	89 2b       	or	r24, r25
    1e7a:	80 83       	st	Z, r24
    1e7c:	08 95       	ret

00001e7e <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	1f 92       	push	r1
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e88:	8f b7       	in	r24, 0x3f	; 63
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1e8c:	f8 94       	cli
	return flags;
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    1e90:	0f 90       	pop	r0
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e98:	8f bf       	out	0x3f, r24	; 63
    1e9a:	08 95       	ret

00001e9c <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    1ea0:	80 e8       	ldi	r24, 0x80	; 128
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	eb d2       	rcall	.+1494   	; 0x247c <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    1ea6:	60 e1       	ldi	r22, 0x10	; 16
    1ea8:	7f e0       	ldi	r23, 0x0F	; 15
    1eaa:	80 e8       	ldi	r24, 0x80	; 128
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	d4 d3       	rcall	.+1960   	; 0x2658 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1eb0:	cf e6       	ldi	r28, 0x6F	; 111
    1eb2:	d0 e0       	ldi	r29, 0x00	; 0
    1eb4:	88 81       	ld	r24, Y
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    1eba:	63 e1       	ldi	r22, 0x13	; 19
    1ebc:	7f e0       	ldi	r23, 0x0F	; 15
    1ebe:	80 e8       	ldi	r24, 0x80	; 128
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	ea d3       	rcall	.+2004   	; 0x2698 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1ec4:	88 81       	ld	r24, Y
    1ec6:	8d 7f       	andi	r24, 0xFD	; 253
    1ec8:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    1eca:	e1 e8       	ldi	r30, 0x81	; 129
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    1ed4:	88 e0       	ldi	r24, 0x08	; 8
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	0b b6       	in	r0, 0x3b	; 59
    1ee8:	0f 92       	push	r0
    1eea:	2f 93       	push	r18
    1eec:	3f 93       	push	r19
    1eee:	4f 93       	push	r20
    1ef0:	5f 93       	push	r21
    1ef2:	6f 93       	push	r22
    1ef4:	7f 93       	push	r23
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25
    1efa:	af 93       	push	r26
    1efc:	bf 93       	push	r27
    1efe:	ef 93       	push	r30
    1f00:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    1f02:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <tc_tccr1_ovf_callback>
    1f06:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <tc_tccr1_ovf_callback+0x1>
    1f0a:	30 97       	sbiw	r30, 0x00	; 0
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    1f0e:	19 95       	eicall
	}
}
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	0b be       	out	0x3b, r0	; 59
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	0b b6       	in	r0, 0x3b	; 59
    1f42:	0f 92       	push	r0
    1f44:	2f 93       	push	r18
    1f46:	3f 93       	push	r19
    1f48:	4f 93       	push	r20
    1f4a:	5f 93       	push	r21
    1f4c:	6f 93       	push	r22
    1f4e:	7f 93       	push	r23
    1f50:	8f 93       	push	r24
    1f52:	9f 93       	push	r25
    1f54:	af 93       	push	r26
    1f56:	bf 93       	push	r27
    1f58:	ef 93       	push	r30
    1f5a:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    1f5c:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <tc_tccr1_compa_callback>
    1f60:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <tc_tccr1_compa_callback+0x1>
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <__vector_17+0x34>
		tc_tccr1_compa_callback();
    1f68:	19 95       	eicall
	}
}
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0b be       	out	0x3b, r0	; 59
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	0f 90       	pop	r0
    1f8c:	1f 90       	pop	r1
    1f8e:	18 95       	reti

00001f90 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	0b b6       	in	r0, 0x3b	; 59
    1f9c:	0f 92       	push	r0
    1f9e:	2f 93       	push	r18
    1fa0:	3f 93       	push	r19
    1fa2:	4f 93       	push	r20
    1fa4:	5f 93       	push	r21
    1fa6:	6f 93       	push	r22
    1fa8:	7f 93       	push	r23
    1faa:	8f 93       	push	r24
    1fac:	9f 93       	push	r25
    1fae:	af 93       	push	r26
    1fb0:	bf 93       	push	r27
    1fb2:	ef 93       	push	r30
    1fb4:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    1fb6:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <tc_tccr1_compb_callback>
    1fba:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <tc_tccr1_compb_callback+0x1>
    1fbe:	30 97       	sbiw	r30, 0x00	; 0
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    1fc2:	19 95       	eicall
	}
}
    1fc4:	ff 91       	pop	r31
    1fc6:	ef 91       	pop	r30
    1fc8:	bf 91       	pop	r27
    1fca:	af 91       	pop	r26
    1fcc:	9f 91       	pop	r25
    1fce:	8f 91       	pop	r24
    1fd0:	7f 91       	pop	r23
    1fd2:	6f 91       	pop	r22
    1fd4:	5f 91       	pop	r21
    1fd6:	4f 91       	pop	r20
    1fd8:	3f 91       	pop	r19
    1fda:	2f 91       	pop	r18
    1fdc:	0f 90       	pop	r0
    1fde:	0b be       	out	0x3b, r0	; 59
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	0f 90       	pop	r0
    1fe6:	1f 90       	pop	r1
    1fe8:	18 95       	reti

00001fea <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    1fea:	1f 92       	push	r1
    1fec:	0f 92       	push	r0
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	0f 92       	push	r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	0b b6       	in	r0, 0x3b	; 59
    1ff6:	0f 92       	push	r0
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	4f 93       	push	r20
    1ffe:	5f 93       	push	r21
    2000:	6f 93       	push	r22
    2002:	7f 93       	push	r23
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	af 93       	push	r26
    200a:	bf 93       	push	r27
    200c:	ef 93       	push	r30
    200e:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2010:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <tc_tccr1_compc_callback>
    2014:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <tc_tccr1_compc_callback+0x1>
    2018:	30 97       	sbiw	r30, 0x00	; 0
    201a:	09 f0       	breq	.+2      	; 0x201e <__vector_19+0x34>
		tc_tccr1_compc_callback();
    201c:	19 95       	eicall
	}
}
    201e:	ff 91       	pop	r31
    2020:	ef 91       	pop	r30
    2022:	bf 91       	pop	r27
    2024:	af 91       	pop	r26
    2026:	9f 91       	pop	r25
    2028:	8f 91       	pop	r24
    202a:	7f 91       	pop	r23
    202c:	6f 91       	pop	r22
    202e:	5f 91       	pop	r21
    2030:	4f 91       	pop	r20
    2032:	3f 91       	pop	r19
    2034:	2f 91       	pop	r18
    2036:	0f 90       	pop	r0
    2038:	0b be       	out	0x3b, r0	; 59
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	0b b6       	in	r0, 0x3b	; 59
    2050:	0f 92       	push	r0
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    206a:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <tc_tccr3_ovf_callback>
    206e:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <tc_tccr3_ovf_callback+0x1>
    2072:	30 97       	sbiw	r30, 0x00	; 0
    2074:	09 f0       	breq	.+2      	; 0x2078 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    2076:	19 95       	eicall
	}
}
    2078:	ff 91       	pop	r31
    207a:	ef 91       	pop	r30
    207c:	bf 91       	pop	r27
    207e:	af 91       	pop	r26
    2080:	9f 91       	pop	r25
    2082:	8f 91       	pop	r24
    2084:	7f 91       	pop	r23
    2086:	6f 91       	pop	r22
    2088:	5f 91       	pop	r21
    208a:	4f 91       	pop	r20
    208c:	3f 91       	pop	r19
    208e:	2f 91       	pop	r18
    2090:	0f 90       	pop	r0
    2092:	0b be       	out	0x3b, r0	; 59
    2094:	0f 90       	pop	r0
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	0f 90       	pop	r0
    209a:	1f 90       	pop	r1
    209c:	18 95       	reti

0000209e <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    209e:	1f 92       	push	r1
    20a0:	0f 92       	push	r0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	0f 92       	push	r0
    20a6:	11 24       	eor	r1, r1
    20a8:	0b b6       	in	r0, 0x3b	; 59
    20aa:	0f 92       	push	r0
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	6f 93       	push	r22
    20b6:	7f 93       	push	r23
    20b8:	8f 93       	push	r24
    20ba:	9f 93       	push	r25
    20bc:	af 93       	push	r26
    20be:	bf 93       	push	r27
    20c0:	ef 93       	push	r30
    20c2:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    20c4:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <tc_tccr3_compa_callback>
    20c8:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <tc_tccr3_compa_callback+0x1>
    20cc:	30 97       	sbiw	r30, 0x00	; 0
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <__vector_32+0x34>
		tc_tccr3_compa_callback();
    20d0:	19 95       	eicall
	}
}
    20d2:	ff 91       	pop	r31
    20d4:	ef 91       	pop	r30
    20d6:	bf 91       	pop	r27
    20d8:	af 91       	pop	r26
    20da:	9f 91       	pop	r25
    20dc:	8f 91       	pop	r24
    20de:	7f 91       	pop	r23
    20e0:	6f 91       	pop	r22
    20e2:	5f 91       	pop	r21
    20e4:	4f 91       	pop	r20
    20e6:	3f 91       	pop	r19
    20e8:	2f 91       	pop	r18
    20ea:	0f 90       	pop	r0
    20ec:	0b be       	out	0x3b, r0	; 59
    20ee:	0f 90       	pop	r0
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	0f 90       	pop	r0
    20f4:	1f 90       	pop	r1
    20f6:	18 95       	reti

000020f8 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	0b b6       	in	r0, 0x3b	; 59
    2104:	0f 92       	push	r0
    2106:	2f 93       	push	r18
    2108:	3f 93       	push	r19
    210a:	4f 93       	push	r20
    210c:	5f 93       	push	r21
    210e:	6f 93       	push	r22
    2110:	7f 93       	push	r23
    2112:	8f 93       	push	r24
    2114:	9f 93       	push	r25
    2116:	af 93       	push	r26
    2118:	bf 93       	push	r27
    211a:	ef 93       	push	r30
    211c:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    211e:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <tc_tccr3_compb_callback>
    2122:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <tc_tccr3_compb_callback+0x1>
    2126:	30 97       	sbiw	r30, 0x00	; 0
    2128:	09 f0       	breq	.+2      	; 0x212c <__vector_33+0x34>
		tc_tccr3_compb_callback();
    212a:	19 95       	eicall
	}
}
    212c:	ff 91       	pop	r31
    212e:	ef 91       	pop	r30
    2130:	bf 91       	pop	r27
    2132:	af 91       	pop	r26
    2134:	9f 91       	pop	r25
    2136:	8f 91       	pop	r24
    2138:	7f 91       	pop	r23
    213a:	6f 91       	pop	r22
    213c:	5f 91       	pop	r21
    213e:	4f 91       	pop	r20
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0b be       	out	0x3b, r0	; 59
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	0b b6       	in	r0, 0x3b	; 59
    215e:	0f 92       	push	r0
    2160:	2f 93       	push	r18
    2162:	3f 93       	push	r19
    2164:	4f 93       	push	r20
    2166:	5f 93       	push	r21
    2168:	6f 93       	push	r22
    216a:	7f 93       	push	r23
    216c:	8f 93       	push	r24
    216e:	9f 93       	push	r25
    2170:	af 93       	push	r26
    2172:	bf 93       	push	r27
    2174:	ef 93       	push	r30
    2176:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2178:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <tc_tccr3_compc_callback>
    217c:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <tc_tccr3_compc_callback+0x1>
    2180:	30 97       	sbiw	r30, 0x00	; 0
    2182:	09 f0       	breq	.+2      	; 0x2186 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2184:	19 95       	eicall
	}
}
    2186:	ff 91       	pop	r31
    2188:	ef 91       	pop	r30
    218a:	bf 91       	pop	r27
    218c:	af 91       	pop	r26
    218e:	9f 91       	pop	r25
    2190:	8f 91       	pop	r24
    2192:	7f 91       	pop	r23
    2194:	6f 91       	pop	r22
    2196:	5f 91       	pop	r21
    2198:	4f 91       	pop	r20
    219a:	3f 91       	pop	r19
    219c:	2f 91       	pop	r18
    219e:	0f 90       	pop	r0
    21a0:	0b be       	out	0x3b, r0	; 59
    21a2:	0f 90       	pop	r0
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	0f 90       	pop	r0
    21a8:	1f 90       	pop	r1
    21aa:	18 95       	reti

000021ac <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    21ac:	1f 92       	push	r1
    21ae:	0f 92       	push	r0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	0f 92       	push	r0
    21b4:	11 24       	eor	r1, r1
    21b6:	0b b6       	in	r0, 0x3b	; 59
    21b8:	0f 92       	push	r0
    21ba:	2f 93       	push	r18
    21bc:	3f 93       	push	r19
    21be:	4f 93       	push	r20
    21c0:	5f 93       	push	r21
    21c2:	6f 93       	push	r22
    21c4:	7f 93       	push	r23
    21c6:	8f 93       	push	r24
    21c8:	9f 93       	push	r25
    21ca:	af 93       	push	r26
    21cc:	bf 93       	push	r27
    21ce:	ef 93       	push	r30
    21d0:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    21d2:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <tc_tccr4_ovf_callback>
    21d6:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <tc_tccr4_ovf_callback+0x1>
    21da:	30 97       	sbiw	r30, 0x00	; 0
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    21de:	19 95       	eicall
	}
}
    21e0:	ff 91       	pop	r31
    21e2:	ef 91       	pop	r30
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0b be       	out	0x3b, r0	; 59
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2206:	1f 92       	push	r1
    2208:	0f 92       	push	r0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	0f 92       	push	r0
    220e:	11 24       	eor	r1, r1
    2210:	0b b6       	in	r0, 0x3b	; 59
    2212:	0f 92       	push	r0
    2214:	2f 93       	push	r18
    2216:	3f 93       	push	r19
    2218:	4f 93       	push	r20
    221a:	5f 93       	push	r21
    221c:	6f 93       	push	r22
    221e:	7f 93       	push	r23
    2220:	8f 93       	push	r24
    2222:	9f 93       	push	r25
    2224:	af 93       	push	r26
    2226:	bf 93       	push	r27
    2228:	ef 93       	push	r30
    222a:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    222c:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <tc_tccr4_compa_callback>
    2230:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <tc_tccr4_compa_callback+0x1>
    2234:	30 97       	sbiw	r30, 0x00	; 0
    2236:	09 f0       	breq	.+2      	; 0x223a <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2238:	19 95       	eicall
	}
}
    223a:	ff 91       	pop	r31
    223c:	ef 91       	pop	r30
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	7f 91       	pop	r23
    2248:	6f 91       	pop	r22
    224a:	5f 91       	pop	r21
    224c:	4f 91       	pop	r20
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0b be       	out	0x3b, r0	; 59
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	0f 90       	pop	r0
    225c:	1f 90       	pop	r1
    225e:	18 95       	reti

00002260 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2260:	1f 92       	push	r1
    2262:	0f 92       	push	r0
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	0f 92       	push	r0
    2268:	11 24       	eor	r1, r1
    226a:	0b b6       	in	r0, 0x3b	; 59
    226c:	0f 92       	push	r0
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	ef 93       	push	r30
    2284:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    2286:	e0 91 7d 04 	lds	r30, 0x047D	; 0x80047d <tc_tccr4_compb_callback>
    228a:	f0 91 7e 04 	lds	r31, 0x047E	; 0x80047e <tc_tccr4_compb_callback+0x1>
    228e:	30 97       	sbiw	r30, 0x00	; 0
    2290:	09 f0       	breq	.+2      	; 0x2294 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    2292:	19 95       	eicall
	}
}
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	7f 91       	pop	r23
    22a2:	6f 91       	pop	r22
    22a4:	5f 91       	pop	r21
    22a6:	4f 91       	pop	r20
    22a8:	3f 91       	pop	r19
    22aa:	2f 91       	pop	r18
    22ac:	0f 90       	pop	r0
    22ae:	0b be       	out	0x3b, r0	; 59
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    22ba:	1f 92       	push	r1
    22bc:	0f 92       	push	r0
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	0f 92       	push	r0
    22c2:	11 24       	eor	r1, r1
    22c4:	0b b6       	in	r0, 0x3b	; 59
    22c6:	0f 92       	push	r0
    22c8:	2f 93       	push	r18
    22ca:	3f 93       	push	r19
    22cc:	4f 93       	push	r20
    22ce:	5f 93       	push	r21
    22d0:	6f 93       	push	r22
    22d2:	7f 93       	push	r23
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    22e0:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <tc_tccr4_compc_callback>
    22e4:	f0 91 7c 04 	lds	r31, 0x047C	; 0x80047c <tc_tccr4_compc_callback+0x1>
    22e8:	30 97       	sbiw	r30, 0x00	; 0
    22ea:	09 f0       	breq	.+2      	; 0x22ee <__vector_44+0x34>
		tc_tccr4_compc_callback();
    22ec:	19 95       	eicall
	}
}
    22ee:	ff 91       	pop	r31
    22f0:	ef 91       	pop	r30
    22f2:	bf 91       	pop	r27
    22f4:	af 91       	pop	r26
    22f6:	9f 91       	pop	r25
    22f8:	8f 91       	pop	r24
    22fa:	7f 91       	pop	r23
    22fc:	6f 91       	pop	r22
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	0f 90       	pop	r0
    2308:	0b be       	out	0x3b, r0	; 59
    230a:	0f 90       	pop	r0
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	0f 90       	pop	r0
    2310:	1f 90       	pop	r1
    2312:	18 95       	reti

00002314 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2314:	1f 92       	push	r1
    2316:	0f 92       	push	r0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	0f 92       	push	r0
    231c:	11 24       	eor	r1, r1
    231e:	0b b6       	in	r0, 0x3b	; 59
    2320:	0f 92       	push	r0
    2322:	2f 93       	push	r18
    2324:	3f 93       	push	r19
    2326:	4f 93       	push	r20
    2328:	5f 93       	push	r21
    232a:	6f 93       	push	r22
    232c:	7f 93       	push	r23
    232e:	8f 93       	push	r24
    2330:	9f 93       	push	r25
    2332:	af 93       	push	r26
    2334:	bf 93       	push	r27
    2336:	ef 93       	push	r30
    2338:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    233a:	e0 91 79 04 	lds	r30, 0x0479	; 0x800479 <tc_tccr5_ovf_callback>
    233e:	f0 91 7a 04 	lds	r31, 0x047A	; 0x80047a <tc_tccr5_ovf_callback+0x1>
    2342:	30 97       	sbiw	r30, 0x00	; 0
    2344:	09 f0       	breq	.+2      	; 0x2348 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    2346:	19 95       	eicall
	}
}
    2348:	ff 91       	pop	r31
    234a:	ef 91       	pop	r30
    234c:	bf 91       	pop	r27
    234e:	af 91       	pop	r26
    2350:	9f 91       	pop	r25
    2352:	8f 91       	pop	r24
    2354:	7f 91       	pop	r23
    2356:	6f 91       	pop	r22
    2358:	5f 91       	pop	r21
    235a:	4f 91       	pop	r20
    235c:	3f 91       	pop	r19
    235e:	2f 91       	pop	r18
    2360:	0f 90       	pop	r0
    2362:	0b be       	out	0x3b, r0	; 59
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	0b b6       	in	r0, 0x3b	; 59
    237a:	0f 92       	push	r0
    237c:	2f 93       	push	r18
    237e:	3f 93       	push	r19
    2380:	4f 93       	push	r20
    2382:	5f 93       	push	r21
    2384:	6f 93       	push	r22
    2386:	7f 93       	push	r23
    2388:	8f 93       	push	r24
    238a:	9f 93       	push	r25
    238c:	af 93       	push	r26
    238e:	bf 93       	push	r27
    2390:	ef 93       	push	r30
    2392:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    2394:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <tc_tccr5_compa_callback>
    2398:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <tc_tccr5_compa_callback+0x1>
    239c:	30 97       	sbiw	r30, 0x00	; 0
    239e:	09 f0       	breq	.+2      	; 0x23a2 <__vector_47+0x34>
		tc_tccr5_compa_callback();
    23a0:	19 95       	eicall
	}
}
    23a2:	ff 91       	pop	r31
    23a4:	ef 91       	pop	r30
    23a6:	bf 91       	pop	r27
    23a8:	af 91       	pop	r26
    23aa:	9f 91       	pop	r25
    23ac:	8f 91       	pop	r24
    23ae:	7f 91       	pop	r23
    23b0:	6f 91       	pop	r22
    23b2:	5f 91       	pop	r21
    23b4:	4f 91       	pop	r20
    23b6:	3f 91       	pop	r19
    23b8:	2f 91       	pop	r18
    23ba:	0f 90       	pop	r0
    23bc:	0b be       	out	0x3b, r0	; 59
    23be:	0f 90       	pop	r0
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	0f 90       	pop	r0
    23c4:	1f 90       	pop	r1
    23c6:	18 95       	reti

000023c8 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    23c8:	1f 92       	push	r1
    23ca:	0f 92       	push	r0
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	0f 92       	push	r0
    23d0:	11 24       	eor	r1, r1
    23d2:	0b b6       	in	r0, 0x3b	; 59
    23d4:	0f 92       	push	r0
    23d6:	2f 93       	push	r18
    23d8:	3f 93       	push	r19
    23da:	4f 93       	push	r20
    23dc:	5f 93       	push	r21
    23de:	6f 93       	push	r22
    23e0:	7f 93       	push	r23
    23e2:	8f 93       	push	r24
    23e4:	9f 93       	push	r25
    23e6:	af 93       	push	r26
    23e8:	bf 93       	push	r27
    23ea:	ef 93       	push	r30
    23ec:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    23ee:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <tc_tccr5_compb_callback>
    23f2:	f0 91 76 04 	lds	r31, 0x0476	; 0x800476 <tc_tccr5_compb_callback+0x1>
    23f6:	30 97       	sbiw	r30, 0x00	; 0
    23f8:	09 f0       	breq	.+2      	; 0x23fc <__vector_48+0x34>
		tc_tccr5_compb_callback();
    23fa:	19 95       	eicall
	}
}
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	0b be       	out	0x3b, r0	; 59
    2418:	0f 90       	pop	r0
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	0f 90       	pop	r0
    241e:	1f 90       	pop	r1
    2420:	18 95       	reti

00002422 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	0b b6       	in	r0, 0x3b	; 59
    242e:	0f 92       	push	r0
    2430:	2f 93       	push	r18
    2432:	3f 93       	push	r19
    2434:	4f 93       	push	r20
    2436:	5f 93       	push	r21
    2438:	6f 93       	push	r22
    243a:	7f 93       	push	r23
    243c:	8f 93       	push	r24
    243e:	9f 93       	push	r25
    2440:	af 93       	push	r26
    2442:	bf 93       	push	r27
    2444:	ef 93       	push	r30
    2446:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    2448:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <tc_tccr5_compc_callback>
    244c:	f0 91 74 04 	lds	r31, 0x0474	; 0x800474 <tc_tccr5_compc_callback+0x1>
    2450:	30 97       	sbiw	r30, 0x00	; 0
    2452:	09 f0       	breq	.+2      	; 0x2456 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    2454:	19 95       	eicall
	}
}
    2456:	ff 91       	pop	r31
    2458:	ef 91       	pop	r30
    245a:	bf 91       	pop	r27
    245c:	af 91       	pop	r26
    245e:	9f 91       	pop	r25
    2460:	8f 91       	pop	r24
    2462:	7f 91       	pop	r23
    2464:	6f 91       	pop	r22
    2466:	5f 91       	pop	r21
    2468:	4f 91       	pop	r20
    246a:	3f 91       	pop	r19
    246c:	2f 91       	pop	r18
    246e:	0f 90       	pop	r0
    2470:	0b be       	out	0x3b, r0	; 59
    2472:	0f 90       	pop	r0
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	0f 90       	pop	r0
    2478:	1f 90       	pop	r1
    247a:	18 95       	reti

0000247c <tc_enable>:

void tc_enable(volatile void *tc)
{
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	1f 92       	push	r1
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2488:	2f b7       	in	r18, 0x3f	; 63
    248a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    248c:	f8 94       	cli
	return flags;
    248e:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	09 f4       	brne	.+2      	; 0x2496 <tc_enable+0x1a>
    2494:	64 c0       	rjmp	.+200    	; 0x255e <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2496:	88 37       	cpi	r24, 0x78	; 120
    2498:	91 05       	cpc	r25, r1
    249a:	49 f4       	brne	.+18     	; 0x24ae <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    24a4:	60 e1       	ldi	r22, 0x10	; 16
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    24ac:	58 c0       	rjmp	.+176    	; 0x255e <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    24ae:	80 3c       	cpi	r24, 0xC0	; 192
    24b0:	91 05       	cpc	r25, r1
    24b2:	29 f4       	brne	.+10     	; 0x24be <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    24b4:	62 e0       	ldi	r22, 0x02	; 2
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    24bc:	50 c0       	rjmp	.+160    	; 0x255e <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    24be:	8c 34       	cpi	r24, 0x4C	; 76
    24c0:	91 05       	cpc	r25, r1
    24c2:	29 f4       	brne	.+10     	; 0x24ce <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    24c4:	64 e0       	ldi	r22, 0x04	; 4
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    24cc:	48 c0       	rjmp	.+144    	; 0x255e <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    24ce:	80 38       	cpi	r24, 0x80	; 128
    24d0:	91 05       	cpc	r25, r1
    24d2:	29 f4       	brne	.+10     	; 0x24de <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    24d4:	68 e0       	ldi	r22, 0x08	; 8
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    24dc:	40 c0       	rjmp	.+128    	; 0x255e <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    24de:	84 34       	cpi	r24, 0x44	; 68
    24e0:	91 05       	cpc	r25, r1
    24e2:	29 f4       	brne	.+10     	; 0x24ee <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    24e4:	60 e2       	ldi	r22, 0x20	; 32
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    24ec:	38 c0       	rjmp	.+112    	; 0x255e <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    24ee:	80 3b       	cpi	r24, 0xB0	; 176
    24f0:	91 05       	cpc	r25, r1
    24f2:	29 f4       	brne	.+10     	; 0x24fe <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    24f4:	60 e4       	ldi	r22, 0x40	; 64
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    24fc:	30 c0       	rjmp	.+96     	; 0x255e <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    24fe:	88 3b       	cpi	r24, 0xB8	; 184
    2500:	91 05       	cpc	r25, r1
    2502:	29 f4       	brne	.+10     	; 0x250e <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2504:	60 e8       	ldi	r22, 0x80	; 128
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    250c:	28 c0       	rjmp	.+80     	; 0x255e <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    250e:	88 3c       	cpi	r24, 0xC8	; 200
    2510:	91 05       	cpc	r25, r1
    2512:	29 f4       	brne	.+10     	; 0x251e <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    2514:	61 e0       	ldi	r22, 0x01	; 1
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    251c:	20 c0       	rjmp	.+64     	; 0x255e <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    251e:	80 39       	cpi	r24, 0x90	; 144
    2520:	91 05       	cpc	r25, r1
    2522:	29 f4       	brne	.+10     	; 0x252e <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    2524:	68 e0       	ldi	r22, 0x08	; 8
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    252c:	18 c0       	rjmp	.+48     	; 0x255e <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    252e:	80 3a       	cpi	r24, 0xA0	; 160
    2530:	91 05       	cpc	r25, r1
    2532:	29 f4       	brne	.+10     	; 0x253e <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    2534:	60 e1       	ldi	r22, 0x10	; 16
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    253c:	10 c0       	rjmp	.+32     	; 0x255e <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    253e:	80 32       	cpi	r24, 0x20	; 32
    2540:	21 e0       	ldi	r18, 0x01	; 1
    2542:	92 07       	cpc	r25, r18
    2544:	29 f4       	brne	.+10     	; 0x2550 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    2546:	60 e2       	ldi	r22, 0x20	; 32
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
    254e:	07 c0       	rjmp	.+14     	; 0x255e <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    2550:	83 34       	cpi	r24, 0x43	; 67
    2552:	91 40       	sbci	r25, 0x01	; 1
    2554:	21 f4       	brne	.+8      	; 0x255e <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    2556:	60 e4       	ldi	r22, 0x40	; 64
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	0e 94 85 03 	call	0x70a	; 0x70a <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    255e:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    2560:	0f 90       	pop	r0
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	08 95       	ret

0000256a <tc_disable>:

void tc_disable(volatile void *tc)
{
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	1f 92       	push	r1
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2576:	2f b7       	in	r18, 0x3f	; 63
    2578:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    257a:	f8 94       	cli
	return flags;
    257c:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	09 f4       	brne	.+2      	; 0x2584 <tc_disable+0x1a>
    2582:	64 c0       	rjmp	.+200    	; 0x264c <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2584:	88 37       	cpi	r24, 0x78	; 120
    2586:	91 05       	cpc	r25, r1
    2588:	49 f4       	brne	.+18     	; 0x259c <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    2592:	60 e1       	ldi	r22, 0x10	; 16
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    259a:	58 c0       	rjmp	.+176    	; 0x264c <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    259c:	80 3c       	cpi	r24, 0xC0	; 192
    259e:	91 05       	cpc	r25, r1
    25a0:	29 f4       	brne	.+10     	; 0x25ac <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    25aa:	50 c0       	rjmp	.+160    	; 0x264c <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    25ac:	8c 34       	cpi	r24, 0x4C	; 76
    25ae:	91 05       	cpc	r25, r1
    25b0:	29 f4       	brne	.+10     	; 0x25bc <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    25b2:	64 e0       	ldi	r22, 0x04	; 4
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    25ba:	48 c0       	rjmp	.+144    	; 0x264c <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    25bc:	80 38       	cpi	r24, 0x80	; 128
    25be:	91 05       	cpc	r25, r1
    25c0:	29 f4       	brne	.+10     	; 0x25cc <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    25c2:	68 e0       	ldi	r22, 0x08	; 8
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    25ca:	40 c0       	rjmp	.+128    	; 0x264c <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    25cc:	84 34       	cpi	r24, 0x44	; 68
    25ce:	91 05       	cpc	r25, r1
    25d0:	29 f4       	brne	.+10     	; 0x25dc <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    25d2:	60 e2       	ldi	r22, 0x20	; 32
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    25da:	38 c0       	rjmp	.+112    	; 0x264c <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    25dc:	80 3b       	cpi	r24, 0xB0	; 176
    25de:	91 05       	cpc	r25, r1
    25e0:	29 f4       	brne	.+10     	; 0x25ec <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    25e2:	60 e4       	ldi	r22, 0x40	; 64
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    25ea:	30 c0       	rjmp	.+96     	; 0x264c <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    25ec:	88 3b       	cpi	r24, 0xB8	; 184
    25ee:	91 05       	cpc	r25, r1
    25f0:	29 f4       	brne	.+10     	; 0x25fc <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    25f2:	60 e8       	ldi	r22, 0x80	; 128
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    25fa:	28 c0       	rjmp	.+80     	; 0x264c <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    25fc:	88 3c       	cpi	r24, 0xC8	; 200
    25fe:	91 05       	cpc	r25, r1
    2600:	29 f4       	brne	.+10     	; 0x260c <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    260a:	20 c0       	rjmp	.+64     	; 0x264c <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    260c:	80 39       	cpi	r24, 0x90	; 144
    260e:	91 05       	cpc	r25, r1
    2610:	29 f4       	brne	.+10     	; 0x261c <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    2612:	68 e0       	ldi	r22, 0x08	; 8
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    261a:	18 c0       	rjmp	.+48     	; 0x264c <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    261c:	80 3a       	cpi	r24, 0xA0	; 160
    261e:	91 05       	cpc	r25, r1
    2620:	29 f4       	brne	.+10     	; 0x262c <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    2622:	60 e1       	ldi	r22, 0x10	; 16
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    262a:	10 c0       	rjmp	.+32     	; 0x264c <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    262c:	80 32       	cpi	r24, 0x20	; 32
    262e:	21 e0       	ldi	r18, 0x01	; 1
    2630:	92 07       	cpc	r25, r18
    2632:	29 f4       	brne	.+10     	; 0x263e <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    2634:	60 e2       	ldi	r22, 0x20	; 32
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
    263c:	07 c0       	rjmp	.+14     	; 0x264c <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    263e:	83 34       	cpi	r24, 0x43	; 67
    2640:	91 40       	sbci	r25, 0x01	; 1
    2642:	21 f4       	brne	.+8      	; 0x264c <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    2644:	60 e4       	ldi	r22, 0x40	; 64
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	0e 94 9d 03 	call	0x73a	; 0x73a <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    264c:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    264e:	0f 90       	pop	r0
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	08 95       	ret

00002658 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2658:	80 38       	cpi	r24, 0x80	; 128
    265a:	91 05       	cpc	r25, r1
    265c:	29 f4       	brne	.+10     	; 0x2668 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    265e:	70 93 92 04 	sts	0x0492, r23	; 0x800492 <tc_tccr1_ovf_callback+0x1>
    2662:	60 93 91 04 	sts	0x0491, r22	; 0x800491 <tc_tccr1_ovf_callback>
    2666:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2668:	80 39       	cpi	r24, 0x90	; 144
    266a:	91 05       	cpc	r25, r1
    266c:	29 f4       	brne	.+10     	; 0x2678 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    266e:	70 93 8a 04 	sts	0x048A, r23	; 0x80048a <tc_tccr3_ovf_callback+0x1>
    2672:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <tc_tccr3_ovf_callback>
    2676:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2678:	80 3a       	cpi	r24, 0xA0	; 160
    267a:	91 05       	cpc	r25, r1
    267c:	29 f4       	brne	.+10     	; 0x2688 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    267e:	70 93 82 04 	sts	0x0482, r23	; 0x800482 <tc_tccr4_ovf_callback+0x1>
    2682:	60 93 81 04 	sts	0x0481, r22	; 0x800481 <tc_tccr4_ovf_callback>
    2686:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2688:	80 32       	cpi	r24, 0x20	; 32
    268a:	91 40       	sbci	r25, 0x01	; 1
    268c:	21 f4       	brne	.+8      	; 0x2696 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    268e:	70 93 7a 04 	sts	0x047A, r23	; 0x80047a <tc_tccr5_ovf_callback+0x1>
    2692:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <tc_tccr5_ovf_callback>
    2696:	08 95       	ret

00002698 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2698:	80 38       	cpi	r24, 0x80	; 128
    269a:	91 05       	cpc	r25, r1
    269c:	29 f4       	brne	.+10     	; 0x26a8 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    269e:	70 93 90 04 	sts	0x0490, r23	; 0x800490 <tc_tccr1_compa_callback+0x1>
    26a2:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <tc_tccr1_compa_callback>
    26a6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    26a8:	80 39       	cpi	r24, 0x90	; 144
    26aa:	91 05       	cpc	r25, r1
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    26ae:	70 93 88 04 	sts	0x0488, r23	; 0x800488 <tc_tccr3_compa_callback+0x1>
    26b2:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <tc_tccr3_compa_callback>
    26b6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    26b8:	80 3a       	cpi	r24, 0xA0	; 160
    26ba:	91 05       	cpc	r25, r1
    26bc:	29 f4       	brne	.+10     	; 0x26c8 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    26be:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <tc_tccr4_compa_callback+0x1>
    26c2:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <tc_tccr4_compa_callback>
    26c6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    26c8:	80 32       	cpi	r24, 0x20	; 32
    26ca:	91 40       	sbci	r25, 0x01	; 1
    26cc:	21 f4       	brne	.+8      	; 0x26d6 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    26ce:	70 93 78 04 	sts	0x0478, r23	; 0x800478 <tc_tccr5_compa_callback+0x1>
    26d2:	60 93 77 04 	sts	0x0477, r22	; 0x800477 <tc_tccr5_compa_callback>
    26d6:	08 95       	ret

000026d8 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    26d8:	0e 94 24 03 	call	0x648	; 0x648 <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    26dc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    26e0:	0e 94 5a 05 	call	0xab4	; 0xab4 <pal_task>
	tal_task();
    26e4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    26e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <usr_wireless_app_task>
    26ec:	f9 cf       	rjmp	.-14     	; 0x26e0 <main+0x8>

000026ee <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    26ee:	0c 94 40 02 	jmp	0x480	; 0x480 <usr_frame_transmitted_cb>
    26f2:	08 95       	ret

000026f4 <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    26fa:	0e 94 0e 02 	call	0x41c	; 0x41c <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	0e 94 86 05 	call	0xb0c	; 0xb0c <bmm_buffer_free>
}
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <__mulsi3>:
    270c:	db 01       	movw	r26, r22
    270e:	8f 93       	push	r24
    2710:	9f 93       	push	r25
    2712:	49 d0       	rcall	.+146    	; 0x27a6 <__muluhisi3>
    2714:	bf 91       	pop	r27
    2716:	af 91       	pop	r26
    2718:	a2 9f       	mul	r26, r18
    271a:	80 0d       	add	r24, r0
    271c:	91 1d       	adc	r25, r1
    271e:	a3 9f       	mul	r26, r19
    2720:	90 0d       	add	r25, r0
    2722:	b2 9f       	mul	r27, r18
    2724:	90 0d       	add	r25, r0
    2726:	11 24       	eor	r1, r1
    2728:	08 95       	ret

0000272a <__udivmodhi4>:
    272a:	aa 1b       	sub	r26, r26
    272c:	bb 1b       	sub	r27, r27
    272e:	51 e1       	ldi	r21, 0x11	; 17
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <__udivmodhi4_ep>

00002732 <__udivmodhi4_loop>:
    2732:	aa 1f       	adc	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	a6 17       	cp	r26, r22
    2738:	b7 07       	cpc	r27, r23
    273a:	10 f0       	brcs	.+4      	; 0x2740 <__udivmodhi4_ep>
    273c:	a6 1b       	sub	r26, r22
    273e:	b7 0b       	sbc	r27, r23

00002740 <__udivmodhi4_ep>:
    2740:	88 1f       	adc	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	5a 95       	dec	r21
    2746:	a9 f7       	brne	.-22     	; 0x2732 <__udivmodhi4_loop>
    2748:	80 95       	com	r24
    274a:	90 95       	com	r25
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	08 95       	ret

00002752 <__divmodhi4>:
    2752:	97 fb       	bst	r25, 7
    2754:	07 2e       	mov	r0, r23
    2756:	16 f4       	brtc	.+4      	; 0x275c <__divmodhi4+0xa>
    2758:	00 94       	com	r0
    275a:	06 d0       	rcall	.+12     	; 0x2768 <__divmodhi4_neg1>
    275c:	77 fd       	sbrc	r23, 7
    275e:	08 d0       	rcall	.+16     	; 0x2770 <__divmodhi4_neg2>
    2760:	e4 df       	rcall	.-56     	; 0x272a <__udivmodhi4>
    2762:	07 fc       	sbrc	r0, 7
    2764:	05 d0       	rcall	.+10     	; 0x2770 <__divmodhi4_neg2>
    2766:	3e f4       	brtc	.+14     	; 0x2776 <__divmodhi4_exit>

00002768 <__divmodhi4_neg1>:
    2768:	90 95       	com	r25
    276a:	81 95       	neg	r24
    276c:	9f 4f       	sbci	r25, 0xFF	; 255
    276e:	08 95       	ret

00002770 <__divmodhi4_neg2>:
    2770:	70 95       	com	r23
    2772:	61 95       	neg	r22
    2774:	7f 4f       	sbci	r23, 0xFF	; 255

00002776 <__divmodhi4_exit>:
    2776:	08 95       	ret

00002778 <__tablejump2__>:
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	88 1f       	adc	r24, r24
    277e:	8b bf       	out	0x3b, r24	; 59
    2780:	07 90       	elpm	r0, Z+
    2782:	f6 91       	elpm	r31, Z
    2784:	e0 2d       	mov	r30, r0
    2786:	19 94       	eijmp

00002788 <__umulhisi3>:
    2788:	a2 9f       	mul	r26, r18
    278a:	b0 01       	movw	r22, r0
    278c:	b3 9f       	mul	r27, r19
    278e:	c0 01       	movw	r24, r0
    2790:	a3 9f       	mul	r26, r19
    2792:	70 0d       	add	r23, r0
    2794:	81 1d       	adc	r24, r1
    2796:	11 24       	eor	r1, r1
    2798:	91 1d       	adc	r25, r1
    279a:	b2 9f       	mul	r27, r18
    279c:	70 0d       	add	r23, r0
    279e:	81 1d       	adc	r24, r1
    27a0:	11 24       	eor	r1, r1
    27a2:	91 1d       	adc	r25, r1
    27a4:	08 95       	ret

000027a6 <__muluhisi3>:
    27a6:	f0 df       	rcall	.-32     	; 0x2788 <__umulhisi3>
    27a8:	a5 9f       	mul	r26, r21
    27aa:	90 0d       	add	r25, r0
    27ac:	b4 9f       	mul	r27, r20
    27ae:	90 0d       	add	r25, r0
    27b0:	a4 9f       	mul	r26, r20
    27b2:	80 0d       	add	r24, r0
    27b4:	91 1d       	adc	r25, r1
    27b6:	11 24       	eor	r1, r1
    27b8:	08 95       	ret

000027ba <__adddi3_s8>:
    27ba:	00 24       	eor	r0, r0
    27bc:	a7 fd       	sbrc	r26, 7
    27be:	00 94       	com	r0
    27c0:	2a 0f       	add	r18, r26
    27c2:	30 1d       	adc	r19, r0
    27c4:	40 1d       	adc	r20, r0
    27c6:	50 1d       	adc	r21, r0
    27c8:	60 1d       	adc	r22, r0
    27ca:	70 1d       	adc	r23, r0
    27cc:	80 1d       	adc	r24, r0
    27ce:	90 1d       	adc	r25, r0
    27d0:	08 95       	ret

000027d2 <__cmpdi2_s8>:
    27d2:	00 24       	eor	r0, r0
    27d4:	a7 fd       	sbrc	r26, 7
    27d6:	00 94       	com	r0
    27d8:	2a 17       	cp	r18, r26
    27da:	30 05       	cpc	r19, r0
    27dc:	40 05       	cpc	r20, r0
    27de:	50 05       	cpc	r21, r0
    27e0:	60 05       	cpc	r22, r0
    27e2:	70 05       	cpc	r23, r0
    27e4:	80 05       	cpc	r24, r0
    27e6:	90 05       	cpc	r25, r0
    27e8:	08 95       	ret

000027ea <do_rand>:
    27ea:	8f 92       	push	r8
    27ec:	9f 92       	push	r9
    27ee:	af 92       	push	r10
    27f0:	bf 92       	push	r11
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	ec 01       	movw	r28, r24
    2800:	68 81       	ld	r22, Y
    2802:	79 81       	ldd	r23, Y+1	; 0x01
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	61 15       	cp	r22, r1
    280a:	71 05       	cpc	r23, r1
    280c:	81 05       	cpc	r24, r1
    280e:	91 05       	cpc	r25, r1
    2810:	21 f4       	brne	.+8      	; 0x281a <do_rand+0x30>
    2812:	64 e2       	ldi	r22, 0x24	; 36
    2814:	79 ed       	ldi	r23, 0xD9	; 217
    2816:	8b e5       	ldi	r24, 0x5B	; 91
    2818:	97 e0       	ldi	r25, 0x07	; 7
    281a:	2d e1       	ldi	r18, 0x1D	; 29
    281c:	33 ef       	ldi	r19, 0xF3	; 243
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	41 d0       	rcall	.+130    	; 0x28a6 <__divmodsi4>
    2824:	49 01       	movw	r8, r18
    2826:	5a 01       	movw	r10, r20
    2828:	9b 01       	movw	r18, r22
    282a:	ac 01       	movw	r20, r24
    282c:	a7 ea       	ldi	r26, 0xA7	; 167
    282e:	b1 e4       	ldi	r27, 0x41	; 65
    2830:	ba df       	rcall	.-140    	; 0x27a6 <__muluhisi3>
    2832:	6b 01       	movw	r12, r22
    2834:	7c 01       	movw	r14, r24
    2836:	ac ee       	ldi	r26, 0xEC	; 236
    2838:	b4 ef       	ldi	r27, 0xF4	; 244
    283a:	a5 01       	movw	r20, r10
    283c:	94 01       	movw	r18, r8
    283e:	51 d0       	rcall	.+162    	; 0x28e2 <__mulohisi3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8c 0d       	add	r24, r12
    2846:	9d 1d       	adc	r25, r13
    2848:	ae 1d       	adc	r26, r14
    284a:	bf 1d       	adc	r27, r15
    284c:	b7 ff       	sbrs	r27, 7
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <do_rand+0x6c>
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	a1 09       	sbc	r26, r1
    2854:	b0 48       	sbci	r27, 0x80	; 128
    2856:	88 83       	st	Y, r24
    2858:	99 83       	std	Y+1, r25	; 0x01
    285a:	aa 83       	std	Y+2, r26	; 0x02
    285c:	bb 83       	std	Y+3, r27	; 0x03
    285e:	9f 77       	andi	r25, 0x7F	; 127
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	9f 90       	pop	r9
    2872:	8f 90       	pop	r8
    2874:	08 95       	ret

00002876 <rand_r>:
    2876:	b9 cf       	rjmp	.-142    	; 0x27ea <do_rand>

00002878 <rand>:
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	92 e0       	ldi	r25, 0x02	; 2
    287c:	b6 cf       	rjmp	.-148    	; 0x27ea <do_rand>

0000287e <srand>:
    287e:	a0 e0       	ldi	r26, 0x00	; 0
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2886:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    288a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    288e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    2892:	08 95       	ret

00002894 <memcpy>:
    2894:	fb 01       	movw	r30, r22
    2896:	dc 01       	movw	r26, r24
    2898:	02 c0       	rjmp	.+4      	; 0x289e <memcpy+0xa>
    289a:	01 90       	ld	r0, Z+
    289c:	0d 92       	st	X+, r0
    289e:	41 50       	subi	r20, 0x01	; 1
    28a0:	50 40       	sbci	r21, 0x00	; 0
    28a2:	d8 f7       	brcc	.-10     	; 0x289a <memcpy+0x6>
    28a4:	08 95       	ret

000028a6 <__divmodsi4>:
    28a6:	05 2e       	mov	r0, r21
    28a8:	97 fb       	bst	r25, 7
    28aa:	16 f4       	brtc	.+4      	; 0x28b0 <__divmodsi4+0xa>
    28ac:	00 94       	com	r0
    28ae:	0f d0       	rcall	.+30     	; 0x28ce <__negsi2>
    28b0:	57 fd       	sbrc	r21, 7
    28b2:	05 d0       	rcall	.+10     	; 0x28be <__divmodsi4_neg2>
    28b4:	1a d0       	rcall	.+52     	; 0x28ea <__udivmodsi4>
    28b6:	07 fc       	sbrc	r0, 7
    28b8:	02 d0       	rcall	.+4      	; 0x28be <__divmodsi4_neg2>
    28ba:	46 f4       	brtc	.+16     	; 0x28cc <__divmodsi4_exit>
    28bc:	08 c0       	rjmp	.+16     	; 0x28ce <__negsi2>

000028be <__divmodsi4_neg2>:
    28be:	50 95       	com	r21
    28c0:	40 95       	com	r20
    28c2:	30 95       	com	r19
    28c4:	21 95       	neg	r18
    28c6:	3f 4f       	sbci	r19, 0xFF	; 255
    28c8:	4f 4f       	sbci	r20, 0xFF	; 255
    28ca:	5f 4f       	sbci	r21, 0xFF	; 255

000028cc <__divmodsi4_exit>:
    28cc:	08 95       	ret

000028ce <__negsi2>:
    28ce:	90 95       	com	r25
    28d0:	80 95       	com	r24
    28d2:	70 95       	com	r23
    28d4:	61 95       	neg	r22
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	8f 4f       	sbci	r24, 0xFF	; 255
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	08 95       	ret

000028de <__mulshisi3>:
    28de:	b7 ff       	sbrs	r27, 7
    28e0:	62 cf       	rjmp	.-316    	; 0x27a6 <__muluhisi3>

000028e2 <__mulohisi3>:
    28e2:	61 df       	rcall	.-318    	; 0x27a6 <__muluhisi3>
    28e4:	82 1b       	sub	r24, r18
    28e6:	93 0b       	sbc	r25, r19
    28e8:	08 95       	ret

000028ea <__udivmodsi4>:
    28ea:	a1 e2       	ldi	r26, 0x21	; 33
    28ec:	1a 2e       	mov	r1, r26
    28ee:	aa 1b       	sub	r26, r26
    28f0:	bb 1b       	sub	r27, r27
    28f2:	fd 01       	movw	r30, r26
    28f4:	0d c0       	rjmp	.+26     	; 0x2910 <__udivmodsi4_ep>

000028f6 <__udivmodsi4_loop>:
    28f6:	aa 1f       	adc	r26, r26
    28f8:	bb 1f       	adc	r27, r27
    28fa:	ee 1f       	adc	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	a2 17       	cp	r26, r18
    2900:	b3 07       	cpc	r27, r19
    2902:	e4 07       	cpc	r30, r20
    2904:	f5 07       	cpc	r31, r21
    2906:	20 f0       	brcs	.+8      	; 0x2910 <__udivmodsi4_ep>
    2908:	a2 1b       	sub	r26, r18
    290a:	b3 0b       	sbc	r27, r19
    290c:	e4 0b       	sbc	r30, r20
    290e:	f5 0b       	sbc	r31, r21

00002910 <__udivmodsi4_ep>:
    2910:	66 1f       	adc	r22, r22
    2912:	77 1f       	adc	r23, r23
    2914:	88 1f       	adc	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	1a 94       	dec	r1
    291a:	69 f7       	brne	.-38     	; 0x28f6 <__udivmodsi4_loop>
    291c:	60 95       	com	r22
    291e:	70 95       	com	r23
    2920:	80 95       	com	r24
    2922:	90 95       	com	r25
    2924:	9b 01       	movw	r18, r22
    2926:	ac 01       	movw	r20, r24
    2928:	bd 01       	movw	r22, r26
    292a:	cf 01       	movw	r24, r30
    292c:	08 95       	ret

0000292e <_exit>:
    292e:	f8 94       	cli

00002930 <__stop_program>:
    2930:	ff cf       	rjmp	.-2      	; 0x2930 <__stop_program>
